-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bgsub is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OFFSET_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OFFSET_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OFFSET_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OFFSET_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_AWREADY : IN STD_LOGIC;
    m_axi_gmem_offset_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_offset_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_WVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_WREADY : IN STD_LOGIC;
    m_axi_gmem_offset_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH-1 downto 0);
    m_axi_gmem_offset_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_offset_WLAST : OUT STD_LOGIC;
    m_axi_gmem_offset_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_ARREADY : IN STD_LOGIC;
    m_axi_gmem_offset_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_offset_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_RVALID : IN STD_LOGIC;
    m_axi_gmem_offset_RREADY : OUT STD_LOGIC;
    m_axi_gmem_offset_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH-1 downto 0);
    m_axi_gmem_offset_RLAST : IN STD_LOGIC;
    m_axi_gmem_offset_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_BVALID : IN STD_LOGIC;
    m_axi_gmem_offset_BREADY : OUT STD_LOGIC;
    m_axi_gmem_offset_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_BUSER_WIDTH-1 downto 0);
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of bgsub is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bgsub,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.575400,HLS_SYN_LAT=2366044,HLS_SYN_TPT=2366045,HLS_SYN_MEM=18,HLS_SYN_DSP=20,HLS_SYN_FF=9439,HLS_SYN_LUT=14442}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal bgsub_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal frame_in : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_out : STD_LOGIC_VECTOR (31 downto 0);
    signal init : STD_LOGIC;
    signal bgmodel : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_gmem_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal gmem_offset_AWVALID : STD_LOGIC;
    signal gmem_offset_AWREADY : STD_LOGIC;
    signal gmem_offset_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_WVALID : STD_LOGIC;
    signal gmem_offset_WREADY : STD_LOGIC;
    signal gmem_offset_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_WLAST : STD_LOGIC;
    signal gmem_offset_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_ARVALID : STD_LOGIC;
    signal gmem_offset_ARREADY : STD_LOGIC;
    signal gmem_offset_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RVALID : STD_LOGIC;
    signal gmem_offset_RREADY : STD_LOGIC;
    signal gmem_offset_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_RLAST : STD_LOGIC;
    signal gmem_offset_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_BVALID : STD_LOGIC;
    signal gmem_offset_BREADY : STD_LOGIC;
    signal gmem_offset_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_gmem_offset_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal bgsub_Block_proc_U0_ap_start : STD_LOGIC;
    signal bgsub_Block_proc_U0_ap_done : STD_LOGIC;
    signal bgsub_Block_proc_U0_ap_continue : STD_LOGIC;
    signal bgsub_Block_proc_U0_ap_idle : STD_LOGIC;
    signal bgsub_Block_proc_U0_ap_ready : STD_LOGIC;
    signal bgsub_Block_proc_U0_init : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_WVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_WREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_WLAST : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_RVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_RREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_RLAST : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_BVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_BREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_bgmodel_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_bgmodel_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_bgmodel1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_WVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_WREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_WLAST : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_RVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_RREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_RLAST : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_BVALID : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_BREADY : STD_LOGIC;
    signal bgsub_Block_proc_U0_m_axi_frame_out_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_m_axi_frame_out_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal bgsub_Block_proc_U0_frame_out2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bgsub_Block_proc_U0_frame_in : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_procdone_bgsub_Block_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;

    component bgsub_Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        init : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_AWVALID : OUT STD_LOGIC;
        m_axi_bgmodel_AWREADY : IN STD_LOGIC;
        m_axi_bgmodel_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bgmodel_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bgmodel_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bgmodel_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bgmodel_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bgmodel_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bgmodel_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bgmodel_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bgmodel_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bgmodel_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_WVALID : OUT STD_LOGIC;
        m_axi_bgmodel_WREADY : IN STD_LOGIC;
        m_axi_bgmodel_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bgmodel_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bgmodel_WLAST : OUT STD_LOGIC;
        m_axi_bgmodel_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_ARVALID : OUT STD_LOGIC;
        m_axi_bgmodel_ARREADY : IN STD_LOGIC;
        m_axi_bgmodel_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bgmodel_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bgmodel_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bgmodel_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bgmodel_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bgmodel_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bgmodel_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bgmodel_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bgmodel_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bgmodel_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_RVALID : IN STD_LOGIC;
        m_axi_bgmodel_RREADY : OUT STD_LOGIC;
        m_axi_bgmodel_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bgmodel_RLAST : IN STD_LOGIC;
        m_axi_bgmodel_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bgmodel_BVALID : IN STD_LOGIC;
        m_axi_bgmodel_BREADY : OUT STD_LOGIC;
        m_axi_bgmodel_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bgmodel_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bgmodel_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bgmodel1 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_out_AWVALID : OUT STD_LOGIC;
        m_axi_frame_out_AWREADY : IN STD_LOGIC;
        m_axi_frame_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frame_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frame_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_WVALID : OUT STD_LOGIC;
        m_axi_frame_out_WREADY : IN STD_LOGIC;
        m_axi_frame_out_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_frame_out_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_WLAST : OUT STD_LOGIC;
        m_axi_frame_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_ARVALID : OUT STD_LOGIC;
        m_axi_frame_out_ARREADY : IN STD_LOGIC;
        m_axi_frame_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frame_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frame_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frame_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frame_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_RVALID : IN STD_LOGIC;
        m_axi_frame_out_RREADY : OUT STD_LOGIC;
        m_axi_frame_out_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_frame_out_RLAST : IN STD_LOGIC;
        m_axi_frame_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_out_BVALID : IN STD_LOGIC;
        m_axi_frame_out_BREADY : OUT STD_LOGIC;
        m_axi_frame_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frame_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frame_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        frame_out2 : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_in : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bgsub_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        frame_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        init : OUT STD_LOGIC;
        bgmodel : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bgsub_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bgsub_gmem_offset_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bgsub_AXILiteS_s_axi_U : component bgsub_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => bgsub_AXILiteS_s_axi_U_ap_dummy_ce,
        frame_in => frame_in,
        frame_out => frame_out,
        init => init,
        bgmodel => bgmodel);

    bgsub_gmem_m_axi_U : component bgsub_gmem_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => bgsub_gmem_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    bgsub_gmem_offset_m_axi_U : component bgsub_gmem_offset_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_OFFSET_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_OFFSET_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_OFFSET_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_OFFSET_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_OFFSET_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_OFFSET_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_OFFSET_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_OFFSET_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_OFFSET_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_offset_AWVALID,
        AWREADY => m_axi_gmem_offset_AWREADY,
        AWADDR => m_axi_gmem_offset_AWADDR,
        AWID => m_axi_gmem_offset_AWID,
        AWLEN => m_axi_gmem_offset_AWLEN,
        AWSIZE => m_axi_gmem_offset_AWSIZE,
        AWBURST => m_axi_gmem_offset_AWBURST,
        AWLOCK => m_axi_gmem_offset_AWLOCK,
        AWCACHE => m_axi_gmem_offset_AWCACHE,
        AWPROT => m_axi_gmem_offset_AWPROT,
        AWQOS => m_axi_gmem_offset_AWQOS,
        AWREGION => m_axi_gmem_offset_AWREGION,
        AWUSER => m_axi_gmem_offset_AWUSER,
        WVALID => m_axi_gmem_offset_WVALID,
        WREADY => m_axi_gmem_offset_WREADY,
        WDATA => m_axi_gmem_offset_WDATA,
        WSTRB => m_axi_gmem_offset_WSTRB,
        WLAST => m_axi_gmem_offset_WLAST,
        WID => m_axi_gmem_offset_WID,
        WUSER => m_axi_gmem_offset_WUSER,
        ARVALID => m_axi_gmem_offset_ARVALID,
        ARREADY => m_axi_gmem_offset_ARREADY,
        ARADDR => m_axi_gmem_offset_ARADDR,
        ARID => m_axi_gmem_offset_ARID,
        ARLEN => m_axi_gmem_offset_ARLEN,
        ARSIZE => m_axi_gmem_offset_ARSIZE,
        ARBURST => m_axi_gmem_offset_ARBURST,
        ARLOCK => m_axi_gmem_offset_ARLOCK,
        ARCACHE => m_axi_gmem_offset_ARCACHE,
        ARPROT => m_axi_gmem_offset_ARPROT,
        ARQOS => m_axi_gmem_offset_ARQOS,
        ARREGION => m_axi_gmem_offset_ARREGION,
        ARUSER => m_axi_gmem_offset_ARUSER,
        RVALID => m_axi_gmem_offset_RVALID,
        RREADY => m_axi_gmem_offset_RREADY,
        RDATA => m_axi_gmem_offset_RDATA,
        RLAST => m_axi_gmem_offset_RLAST,
        RID => m_axi_gmem_offset_RID,
        RUSER => m_axi_gmem_offset_RUSER,
        RRESP => m_axi_gmem_offset_RRESP,
        BVALID => m_axi_gmem_offset_BVALID,
        BREADY => m_axi_gmem_offset_BREADY,
        BRESP => m_axi_gmem_offset_BRESP,
        BID => m_axi_gmem_offset_BID,
        BUSER => m_axi_gmem_offset_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => bgsub_gmem_offset_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_offset_ARVALID,
        I_ARREADY => gmem_offset_ARREADY,
        I_ARADDR => gmem_offset_ARADDR,
        I_ARID => gmem_offset_ARID,
        I_ARLEN => gmem_offset_ARLEN,
        I_ARSIZE => gmem_offset_ARSIZE,
        I_ARLOCK => gmem_offset_ARLOCK,
        I_ARCACHE => gmem_offset_ARCACHE,
        I_ARQOS => gmem_offset_ARQOS,
        I_ARPROT => gmem_offset_ARPROT,
        I_ARUSER => gmem_offset_ARUSER,
        I_ARBURST => gmem_offset_ARBURST,
        I_ARREGION => gmem_offset_ARREGION,
        I_RVALID => gmem_offset_RVALID,
        I_RREADY => gmem_offset_RREADY,
        I_RDATA => gmem_offset_RDATA,
        I_RID => gmem_offset_RID,
        I_RUSER => gmem_offset_RUSER,
        I_RRESP => gmem_offset_RRESP,
        I_RLAST => gmem_offset_RLAST,
        I_AWVALID => gmem_offset_AWVALID,
        I_AWREADY => gmem_offset_AWREADY,
        I_AWADDR => gmem_offset_AWADDR,
        I_AWID => gmem_offset_AWID,
        I_AWLEN => gmem_offset_AWLEN,
        I_AWSIZE => gmem_offset_AWSIZE,
        I_AWLOCK => gmem_offset_AWLOCK,
        I_AWCACHE => gmem_offset_AWCACHE,
        I_AWQOS => gmem_offset_AWQOS,
        I_AWPROT => gmem_offset_AWPROT,
        I_AWUSER => gmem_offset_AWUSER,
        I_AWBURST => gmem_offset_AWBURST,
        I_AWREGION => gmem_offset_AWREGION,
        I_WVALID => gmem_offset_WVALID,
        I_WREADY => gmem_offset_WREADY,
        I_WDATA => gmem_offset_WDATA,
        I_WID => gmem_offset_WID,
        I_WUSER => gmem_offset_WUSER,
        I_WLAST => gmem_offset_WLAST,
        I_WSTRB => gmem_offset_WSTRB,
        I_BVALID => gmem_offset_BVALID,
        I_BREADY => gmem_offset_BREADY,
        I_BRESP => gmem_offset_BRESP,
        I_BID => gmem_offset_BID,
        I_BUSER => gmem_offset_BUSER);

    bgsub_Block_proc_U0 : component bgsub_Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => bgsub_Block_proc_U0_ap_start,
        ap_done => bgsub_Block_proc_U0_ap_done,
        ap_continue => bgsub_Block_proc_U0_ap_continue,
        ap_idle => bgsub_Block_proc_U0_ap_idle,
        ap_ready => bgsub_Block_proc_U0_ap_ready,
        init => bgsub_Block_proc_U0_init,
        m_axi_bgmodel_AWVALID => bgsub_Block_proc_U0_m_axi_bgmodel_AWVALID,
        m_axi_bgmodel_AWREADY => bgsub_Block_proc_U0_m_axi_bgmodel_AWREADY,
        m_axi_bgmodel_AWADDR => bgsub_Block_proc_U0_m_axi_bgmodel_AWADDR,
        m_axi_bgmodel_AWID => bgsub_Block_proc_U0_m_axi_bgmodel_AWID,
        m_axi_bgmodel_AWLEN => bgsub_Block_proc_U0_m_axi_bgmodel_AWLEN,
        m_axi_bgmodel_AWSIZE => bgsub_Block_proc_U0_m_axi_bgmodel_AWSIZE,
        m_axi_bgmodel_AWBURST => bgsub_Block_proc_U0_m_axi_bgmodel_AWBURST,
        m_axi_bgmodel_AWLOCK => bgsub_Block_proc_U0_m_axi_bgmodel_AWLOCK,
        m_axi_bgmodel_AWCACHE => bgsub_Block_proc_U0_m_axi_bgmodel_AWCACHE,
        m_axi_bgmodel_AWPROT => bgsub_Block_proc_U0_m_axi_bgmodel_AWPROT,
        m_axi_bgmodel_AWQOS => bgsub_Block_proc_U0_m_axi_bgmodel_AWQOS,
        m_axi_bgmodel_AWREGION => bgsub_Block_proc_U0_m_axi_bgmodel_AWREGION,
        m_axi_bgmodel_AWUSER => bgsub_Block_proc_U0_m_axi_bgmodel_AWUSER,
        m_axi_bgmodel_WVALID => bgsub_Block_proc_U0_m_axi_bgmodel_WVALID,
        m_axi_bgmodel_WREADY => bgsub_Block_proc_U0_m_axi_bgmodel_WREADY,
        m_axi_bgmodel_WDATA => bgsub_Block_proc_U0_m_axi_bgmodel_WDATA,
        m_axi_bgmodel_WSTRB => bgsub_Block_proc_U0_m_axi_bgmodel_WSTRB,
        m_axi_bgmodel_WLAST => bgsub_Block_proc_U0_m_axi_bgmodel_WLAST,
        m_axi_bgmodel_WID => bgsub_Block_proc_U0_m_axi_bgmodel_WID,
        m_axi_bgmodel_WUSER => bgsub_Block_proc_U0_m_axi_bgmodel_WUSER,
        m_axi_bgmodel_ARVALID => bgsub_Block_proc_U0_m_axi_bgmodel_ARVALID,
        m_axi_bgmodel_ARREADY => bgsub_Block_proc_U0_m_axi_bgmodel_ARREADY,
        m_axi_bgmodel_ARADDR => bgsub_Block_proc_U0_m_axi_bgmodel_ARADDR,
        m_axi_bgmodel_ARID => bgsub_Block_proc_U0_m_axi_bgmodel_ARID,
        m_axi_bgmodel_ARLEN => bgsub_Block_proc_U0_m_axi_bgmodel_ARLEN,
        m_axi_bgmodel_ARSIZE => bgsub_Block_proc_U0_m_axi_bgmodel_ARSIZE,
        m_axi_bgmodel_ARBURST => bgsub_Block_proc_U0_m_axi_bgmodel_ARBURST,
        m_axi_bgmodel_ARLOCK => bgsub_Block_proc_U0_m_axi_bgmodel_ARLOCK,
        m_axi_bgmodel_ARCACHE => bgsub_Block_proc_U0_m_axi_bgmodel_ARCACHE,
        m_axi_bgmodel_ARPROT => bgsub_Block_proc_U0_m_axi_bgmodel_ARPROT,
        m_axi_bgmodel_ARQOS => bgsub_Block_proc_U0_m_axi_bgmodel_ARQOS,
        m_axi_bgmodel_ARREGION => bgsub_Block_proc_U0_m_axi_bgmodel_ARREGION,
        m_axi_bgmodel_ARUSER => bgsub_Block_proc_U0_m_axi_bgmodel_ARUSER,
        m_axi_bgmodel_RVALID => bgsub_Block_proc_U0_m_axi_bgmodel_RVALID,
        m_axi_bgmodel_RREADY => bgsub_Block_proc_U0_m_axi_bgmodel_RREADY,
        m_axi_bgmodel_RDATA => bgsub_Block_proc_U0_m_axi_bgmodel_RDATA,
        m_axi_bgmodel_RLAST => bgsub_Block_proc_U0_m_axi_bgmodel_RLAST,
        m_axi_bgmodel_RID => bgsub_Block_proc_U0_m_axi_bgmodel_RID,
        m_axi_bgmodel_RUSER => bgsub_Block_proc_U0_m_axi_bgmodel_RUSER,
        m_axi_bgmodel_RRESP => bgsub_Block_proc_U0_m_axi_bgmodel_RRESP,
        m_axi_bgmodel_BVALID => bgsub_Block_proc_U0_m_axi_bgmodel_BVALID,
        m_axi_bgmodel_BREADY => bgsub_Block_proc_U0_m_axi_bgmodel_BREADY,
        m_axi_bgmodel_BRESP => bgsub_Block_proc_U0_m_axi_bgmodel_BRESP,
        m_axi_bgmodel_BID => bgsub_Block_proc_U0_m_axi_bgmodel_BID,
        m_axi_bgmodel_BUSER => bgsub_Block_proc_U0_m_axi_bgmodel_BUSER,
        bgmodel1 => bgsub_Block_proc_U0_bgmodel1,
        m_axi_frame_out_AWVALID => bgsub_Block_proc_U0_m_axi_frame_out_AWVALID,
        m_axi_frame_out_AWREADY => bgsub_Block_proc_U0_m_axi_frame_out_AWREADY,
        m_axi_frame_out_AWADDR => bgsub_Block_proc_U0_m_axi_frame_out_AWADDR,
        m_axi_frame_out_AWID => bgsub_Block_proc_U0_m_axi_frame_out_AWID,
        m_axi_frame_out_AWLEN => bgsub_Block_proc_U0_m_axi_frame_out_AWLEN,
        m_axi_frame_out_AWSIZE => bgsub_Block_proc_U0_m_axi_frame_out_AWSIZE,
        m_axi_frame_out_AWBURST => bgsub_Block_proc_U0_m_axi_frame_out_AWBURST,
        m_axi_frame_out_AWLOCK => bgsub_Block_proc_U0_m_axi_frame_out_AWLOCK,
        m_axi_frame_out_AWCACHE => bgsub_Block_proc_U0_m_axi_frame_out_AWCACHE,
        m_axi_frame_out_AWPROT => bgsub_Block_proc_U0_m_axi_frame_out_AWPROT,
        m_axi_frame_out_AWQOS => bgsub_Block_proc_U0_m_axi_frame_out_AWQOS,
        m_axi_frame_out_AWREGION => bgsub_Block_proc_U0_m_axi_frame_out_AWREGION,
        m_axi_frame_out_AWUSER => bgsub_Block_proc_U0_m_axi_frame_out_AWUSER,
        m_axi_frame_out_WVALID => bgsub_Block_proc_U0_m_axi_frame_out_WVALID,
        m_axi_frame_out_WREADY => bgsub_Block_proc_U0_m_axi_frame_out_WREADY,
        m_axi_frame_out_WDATA => bgsub_Block_proc_U0_m_axi_frame_out_WDATA,
        m_axi_frame_out_WSTRB => bgsub_Block_proc_U0_m_axi_frame_out_WSTRB,
        m_axi_frame_out_WLAST => bgsub_Block_proc_U0_m_axi_frame_out_WLAST,
        m_axi_frame_out_WID => bgsub_Block_proc_U0_m_axi_frame_out_WID,
        m_axi_frame_out_WUSER => bgsub_Block_proc_U0_m_axi_frame_out_WUSER,
        m_axi_frame_out_ARVALID => bgsub_Block_proc_U0_m_axi_frame_out_ARVALID,
        m_axi_frame_out_ARREADY => bgsub_Block_proc_U0_m_axi_frame_out_ARREADY,
        m_axi_frame_out_ARADDR => bgsub_Block_proc_U0_m_axi_frame_out_ARADDR,
        m_axi_frame_out_ARID => bgsub_Block_proc_U0_m_axi_frame_out_ARID,
        m_axi_frame_out_ARLEN => bgsub_Block_proc_U0_m_axi_frame_out_ARLEN,
        m_axi_frame_out_ARSIZE => bgsub_Block_proc_U0_m_axi_frame_out_ARSIZE,
        m_axi_frame_out_ARBURST => bgsub_Block_proc_U0_m_axi_frame_out_ARBURST,
        m_axi_frame_out_ARLOCK => bgsub_Block_proc_U0_m_axi_frame_out_ARLOCK,
        m_axi_frame_out_ARCACHE => bgsub_Block_proc_U0_m_axi_frame_out_ARCACHE,
        m_axi_frame_out_ARPROT => bgsub_Block_proc_U0_m_axi_frame_out_ARPROT,
        m_axi_frame_out_ARQOS => bgsub_Block_proc_U0_m_axi_frame_out_ARQOS,
        m_axi_frame_out_ARREGION => bgsub_Block_proc_U0_m_axi_frame_out_ARREGION,
        m_axi_frame_out_ARUSER => bgsub_Block_proc_U0_m_axi_frame_out_ARUSER,
        m_axi_frame_out_RVALID => bgsub_Block_proc_U0_m_axi_frame_out_RVALID,
        m_axi_frame_out_RREADY => bgsub_Block_proc_U0_m_axi_frame_out_RREADY,
        m_axi_frame_out_RDATA => bgsub_Block_proc_U0_m_axi_frame_out_RDATA,
        m_axi_frame_out_RLAST => bgsub_Block_proc_U0_m_axi_frame_out_RLAST,
        m_axi_frame_out_RID => bgsub_Block_proc_U0_m_axi_frame_out_RID,
        m_axi_frame_out_RUSER => bgsub_Block_proc_U0_m_axi_frame_out_RUSER,
        m_axi_frame_out_RRESP => bgsub_Block_proc_U0_m_axi_frame_out_RRESP,
        m_axi_frame_out_BVALID => bgsub_Block_proc_U0_m_axi_frame_out_BVALID,
        m_axi_frame_out_BREADY => bgsub_Block_proc_U0_m_axi_frame_out_BREADY,
        m_axi_frame_out_BRESP => bgsub_Block_proc_U0_m_axi_frame_out_BRESP,
        m_axi_frame_out_BID => bgsub_Block_proc_U0_m_axi_frame_out_BID,
        m_axi_frame_out_BUSER => bgsub_Block_proc_U0_m_axi_frame_out_BUSER,
        frame_out2 => bgsub_Block_proc_U0_frame_out2,
        frame_in => bgsub_Block_proc_U0_frame_in);





    -- ap_reg_procdone_bgsub_Block_proc_U0 assign process. --
    ap_reg_procdone_bgsub_Block_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_bgsub_Block_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_bgsub_Block_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = bgsub_Block_proc_U0_ap_done)) then 
                    ap_reg_procdone_bgsub_Block_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(bgsub_Block_proc_U0_ap_idle)
    begin
        if ((ap_const_logic_1 = bgsub_Block_proc_U0_ap_idle)) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(bgsub_Block_proc_U0_ap_done)
    begin
        if ((ap_const_logic_1 = bgsub_Block_proc_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= bgsub_Block_proc_U0_ap_ready;
    bgsub_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    bgsub_Block_proc_U0_ap_continue <= ap_const_logic_1;
    bgsub_Block_proc_U0_ap_start <= ap_start;
    bgsub_Block_proc_U0_bgmodel1 <= bgmodel;
    bgsub_Block_proc_U0_frame_in <= frame_in;
    bgsub_Block_proc_U0_frame_out2 <= frame_out;
    bgsub_Block_proc_U0_init <= (0=>init, others=>'-');
    bgsub_Block_proc_U0_m_axi_bgmodel_ARREADY <= gmem_offset_ARREADY;
    bgsub_Block_proc_U0_m_axi_bgmodel_AWREADY <= gmem_offset_AWREADY;
    bgsub_Block_proc_U0_m_axi_bgmodel_BID <= gmem_offset_BID;
    bgsub_Block_proc_U0_m_axi_bgmodel_BRESP <= gmem_offset_BRESP;
    bgsub_Block_proc_U0_m_axi_bgmodel_BUSER <= gmem_offset_BUSER;
    bgsub_Block_proc_U0_m_axi_bgmodel_BVALID <= gmem_offset_BVALID;
    bgsub_Block_proc_U0_m_axi_bgmodel_RDATA <= gmem_offset_RDATA;
    bgsub_Block_proc_U0_m_axi_bgmodel_RID <= gmem_offset_RID;
    bgsub_Block_proc_U0_m_axi_bgmodel_RLAST <= gmem_offset_RLAST;
    bgsub_Block_proc_U0_m_axi_bgmodel_RRESP <= gmem_offset_RRESP;
    bgsub_Block_proc_U0_m_axi_bgmodel_RUSER <= gmem_offset_RUSER;
    bgsub_Block_proc_U0_m_axi_bgmodel_RVALID <= gmem_offset_RVALID;
    bgsub_Block_proc_U0_m_axi_bgmodel_WREADY <= gmem_offset_WREADY;
    bgsub_Block_proc_U0_m_axi_frame_out_ARREADY <= gmem_ARREADY;
    bgsub_Block_proc_U0_m_axi_frame_out_AWREADY <= gmem_AWREADY;
    bgsub_Block_proc_U0_m_axi_frame_out_BID <= gmem_BID;
    bgsub_Block_proc_U0_m_axi_frame_out_BRESP <= gmem_BRESP;
    bgsub_Block_proc_U0_m_axi_frame_out_BUSER <= gmem_BUSER;
    bgsub_Block_proc_U0_m_axi_frame_out_BVALID <= gmem_BVALID;
    bgsub_Block_proc_U0_m_axi_frame_out_RDATA <= gmem_RDATA;
    bgsub_Block_proc_U0_m_axi_frame_out_RID <= gmem_RID;
    bgsub_Block_proc_U0_m_axi_frame_out_RLAST <= gmem_RLAST;
    bgsub_Block_proc_U0_m_axi_frame_out_RRESP <= gmem_RRESP;
    bgsub_Block_proc_U0_m_axi_frame_out_RUSER <= gmem_RUSER;
    bgsub_Block_proc_U0_m_axi_frame_out_RVALID <= gmem_RVALID;
    bgsub_Block_proc_U0_m_axi_frame_out_WREADY <= gmem_WREADY;
    bgsub_gmem_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    bgsub_gmem_offset_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    gmem_ARADDR <= bgsub_Block_proc_U0_m_axi_frame_out_ARADDR;
    gmem_ARBURST <= bgsub_Block_proc_U0_m_axi_frame_out_ARBURST;
    gmem_ARCACHE <= bgsub_Block_proc_U0_m_axi_frame_out_ARCACHE;
    gmem_ARID <= bgsub_Block_proc_U0_m_axi_frame_out_ARID;
    gmem_ARLEN <= bgsub_Block_proc_U0_m_axi_frame_out_ARLEN;
    gmem_ARLOCK <= bgsub_Block_proc_U0_m_axi_frame_out_ARLOCK;
    gmem_ARPROT <= bgsub_Block_proc_U0_m_axi_frame_out_ARPROT;
    gmem_ARQOS <= bgsub_Block_proc_U0_m_axi_frame_out_ARQOS;
    gmem_ARREGION <= bgsub_Block_proc_U0_m_axi_frame_out_ARREGION;
    gmem_ARSIZE <= bgsub_Block_proc_U0_m_axi_frame_out_ARSIZE;
    gmem_ARUSER <= bgsub_Block_proc_U0_m_axi_frame_out_ARUSER;
    gmem_ARVALID <= bgsub_Block_proc_U0_m_axi_frame_out_ARVALID;
    gmem_AWADDR <= bgsub_Block_proc_U0_m_axi_frame_out_AWADDR;
    gmem_AWBURST <= bgsub_Block_proc_U0_m_axi_frame_out_AWBURST;
    gmem_AWCACHE <= bgsub_Block_proc_U0_m_axi_frame_out_AWCACHE;
    gmem_AWID <= bgsub_Block_proc_U0_m_axi_frame_out_AWID;
    gmem_AWLEN <= bgsub_Block_proc_U0_m_axi_frame_out_AWLEN;
    gmem_AWLOCK <= bgsub_Block_proc_U0_m_axi_frame_out_AWLOCK;
    gmem_AWPROT <= bgsub_Block_proc_U0_m_axi_frame_out_AWPROT;
    gmem_AWQOS <= bgsub_Block_proc_U0_m_axi_frame_out_AWQOS;
    gmem_AWREGION <= bgsub_Block_proc_U0_m_axi_frame_out_AWREGION;
    gmem_AWSIZE <= bgsub_Block_proc_U0_m_axi_frame_out_AWSIZE;
    gmem_AWUSER <= bgsub_Block_proc_U0_m_axi_frame_out_AWUSER;
    gmem_AWVALID <= bgsub_Block_proc_U0_m_axi_frame_out_AWVALID;
    gmem_BREADY <= bgsub_Block_proc_U0_m_axi_frame_out_BREADY;
    gmem_RREADY <= bgsub_Block_proc_U0_m_axi_frame_out_RREADY;
    gmem_WDATA <= bgsub_Block_proc_U0_m_axi_frame_out_WDATA;
    gmem_WID <= bgsub_Block_proc_U0_m_axi_frame_out_WID;
    gmem_WLAST <= bgsub_Block_proc_U0_m_axi_frame_out_WLAST;
    gmem_WSTRB <= bgsub_Block_proc_U0_m_axi_frame_out_WSTRB;
    gmem_WUSER <= bgsub_Block_proc_U0_m_axi_frame_out_WUSER;
    gmem_WVALID <= bgsub_Block_proc_U0_m_axi_frame_out_WVALID;
    gmem_offset_ARADDR <= bgsub_Block_proc_U0_m_axi_bgmodel_ARADDR;
    gmem_offset_ARBURST <= bgsub_Block_proc_U0_m_axi_bgmodel_ARBURST;
    gmem_offset_ARCACHE <= bgsub_Block_proc_U0_m_axi_bgmodel_ARCACHE;
    gmem_offset_ARID <= bgsub_Block_proc_U0_m_axi_bgmodel_ARID;
    gmem_offset_ARLEN <= bgsub_Block_proc_U0_m_axi_bgmodel_ARLEN;
    gmem_offset_ARLOCK <= bgsub_Block_proc_U0_m_axi_bgmodel_ARLOCK;
    gmem_offset_ARPROT <= bgsub_Block_proc_U0_m_axi_bgmodel_ARPROT;
    gmem_offset_ARQOS <= bgsub_Block_proc_U0_m_axi_bgmodel_ARQOS;
    gmem_offset_ARREGION <= bgsub_Block_proc_U0_m_axi_bgmodel_ARREGION;
    gmem_offset_ARSIZE <= bgsub_Block_proc_U0_m_axi_bgmodel_ARSIZE;
    gmem_offset_ARUSER <= bgsub_Block_proc_U0_m_axi_bgmodel_ARUSER;
    gmem_offset_ARVALID <= bgsub_Block_proc_U0_m_axi_bgmodel_ARVALID;
    gmem_offset_AWADDR <= bgsub_Block_proc_U0_m_axi_bgmodel_AWADDR;
    gmem_offset_AWBURST <= bgsub_Block_proc_U0_m_axi_bgmodel_AWBURST;
    gmem_offset_AWCACHE <= bgsub_Block_proc_U0_m_axi_bgmodel_AWCACHE;
    gmem_offset_AWID <= bgsub_Block_proc_U0_m_axi_bgmodel_AWID;
    gmem_offset_AWLEN <= bgsub_Block_proc_U0_m_axi_bgmodel_AWLEN;
    gmem_offset_AWLOCK <= bgsub_Block_proc_U0_m_axi_bgmodel_AWLOCK;
    gmem_offset_AWPROT <= bgsub_Block_proc_U0_m_axi_bgmodel_AWPROT;
    gmem_offset_AWQOS <= bgsub_Block_proc_U0_m_axi_bgmodel_AWQOS;
    gmem_offset_AWREGION <= bgsub_Block_proc_U0_m_axi_bgmodel_AWREGION;
    gmem_offset_AWSIZE <= bgsub_Block_proc_U0_m_axi_bgmodel_AWSIZE;
    gmem_offset_AWUSER <= bgsub_Block_proc_U0_m_axi_bgmodel_AWUSER;
    gmem_offset_AWVALID <= bgsub_Block_proc_U0_m_axi_bgmodel_AWVALID;
    gmem_offset_BREADY <= bgsub_Block_proc_U0_m_axi_bgmodel_BREADY;
    gmem_offset_RREADY <= bgsub_Block_proc_U0_m_axi_bgmodel_RREADY;
    gmem_offset_WDATA <= bgsub_Block_proc_U0_m_axi_bgmodel_WDATA;
    gmem_offset_WID <= bgsub_Block_proc_U0_m_axi_bgmodel_WID;
    gmem_offset_WLAST <= bgsub_Block_proc_U0_m_axi_bgmodel_WLAST;
    gmem_offset_WSTRB <= bgsub_Block_proc_U0_m_axi_bgmodel_WSTRB;
    gmem_offset_WUSER <= bgsub_Block_proc_U0_m_axi_bgmodel_WUSER;
    gmem_offset_WVALID <= bgsub_Block_proc_U0_m_axi_bgmodel_WVALID;
end behav;
