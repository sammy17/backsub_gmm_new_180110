-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bgsub_Block_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    init : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_AWVALID : OUT STD_LOGIC;
    m_axi_bgmodel_AWREADY : IN STD_LOGIC;
    m_axi_bgmodel_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bgmodel_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bgmodel_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bgmodel_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bgmodel_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bgmodel_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bgmodel_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bgmodel_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bgmodel_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bgmodel_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_WVALID : OUT STD_LOGIC;
    m_axi_bgmodel_WREADY : IN STD_LOGIC;
    m_axi_bgmodel_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bgmodel_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bgmodel_WLAST : OUT STD_LOGIC;
    m_axi_bgmodel_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_ARVALID : OUT STD_LOGIC;
    m_axi_bgmodel_ARREADY : IN STD_LOGIC;
    m_axi_bgmodel_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bgmodel_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bgmodel_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bgmodel_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bgmodel_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bgmodel_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bgmodel_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bgmodel_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bgmodel_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bgmodel_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_RVALID : IN STD_LOGIC;
    m_axi_bgmodel_RREADY : OUT STD_LOGIC;
    m_axi_bgmodel_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bgmodel_RLAST : IN STD_LOGIC;
    m_axi_bgmodel_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bgmodel_BVALID : IN STD_LOGIC;
    m_axi_bgmodel_BREADY : OUT STD_LOGIC;
    m_axi_bgmodel_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bgmodel_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bgmodel_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bgmodel1 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frame_out_AWVALID : OUT STD_LOGIC;
    m_axi_frame_out_AWREADY : IN STD_LOGIC;
    m_axi_frame_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frame_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frame_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_frame_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frame_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frame_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frame_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_frame_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frame_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frame_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_WVALID : OUT STD_LOGIC;
    m_axi_frame_out_WREADY : IN STD_LOGIC;
    m_axi_frame_out_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_frame_out_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_WLAST : OUT STD_LOGIC;
    m_axi_frame_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_ARVALID : OUT STD_LOGIC;
    m_axi_frame_out_ARREADY : IN STD_LOGIC;
    m_axi_frame_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frame_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frame_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_frame_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frame_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frame_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frame_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_frame_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frame_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frame_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_RVALID : IN STD_LOGIC;
    m_axi_frame_out_RREADY : OUT STD_LOGIC;
    m_axi_frame_out_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_frame_out_RLAST : IN STD_LOGIC;
    m_axi_frame_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frame_out_BVALID : IN STD_LOGIC;
    m_axi_frame_out_BREADY : OUT STD_LOGIC;
    m_axi_frame_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frame_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frame_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    frame_out2 : IN STD_LOGIC_VECTOR (31 downto 0);
    frame_in : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of bgsub_Block_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_pp0_stg0_fsm_14 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st18_fsm_15 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st19_fsm_16 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st20_fsm_17 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st21_fsm_18 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st22_fsm_19 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st23_fsm_20 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st24_fsm_21 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st25_fsm_22 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_pp1_stg0_fsm_23 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st29_fsm_24 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st30_fsm_25 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st31_fsm_26 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st32_fsm_27 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st33_fsm_28 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st34_fsm_29 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st35_fsm_30 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st36_fsm_31 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_pp2_stg0_fsm_32 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st40_fsm_33 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st41_fsm_34 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st42_fsm_35 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st43_fsm_36 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_37 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_38 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_39 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_40 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_41 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_42 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_43 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_pp4_stg0_fsm_44 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_45 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_46 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_47 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_48 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_49 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_pp5_stg0_fsm_50 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_51 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_52 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_53 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_54 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_55 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp6_stg0_fsm_56 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_57 : STD_LOGIC_VECTOR (67 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_58 : STD_LOGIC_VECTOR (67 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_59 : STD_LOGIC_VECTOR (67 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_60 : STD_LOGIC_VECTOR (67 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_61 : STD_LOGIC_VECTOR (67 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_pp7_stg0_fsm_62 : STD_LOGIC_VECTOR (67 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_63 : STD_LOGIC_VECTOR (67 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_64 : STD_LOGIC_VECTOR (67 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_65 : STD_LOGIC_VECTOR (67 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_66 : STD_LOGIC_VECTOR (67 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_67 : STD_LOGIC_VECTOR (67 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_4B000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001001011000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_A00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000101000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv19_4B000 : STD_LOGIC_VECTOR (18 downto 0) := "1001011000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_87 : BOOLEAN;
    signal indvar_reg_374 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_indvar_reg_374_pp0_it1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_208 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_217 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar9_reg_386 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_ppstg_indvar9_reg_386_pp1_it1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond4_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_241 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar1_reg_398 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_indvar1_reg_398_pp2_it1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_257 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal exitcond5_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_264 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal indvar2_reg_410 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_ppstg_indvar2_reg_410_pp3_it1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_280 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal exitcond6_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_287 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it2 : STD_LOGIC := '0';
    signal indvar3_reg_422 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar4_reg_433 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar5_reg_444 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar6_reg_455 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_484 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_326 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_bgmodel_AWREADY : STD_LOGIC;
    signal tmp_111_cast_fu_496_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_111_cast_reg_937 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_112_cast_fu_500_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_112_cast_reg_943 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_113_cast_fu_514_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_113_cast_reg_949 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_1_fu_535_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_351 : BOOLEAN;
    signal exitcond_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_bgmodel_WREADY : STD_LOGIC;
    signal tmp_113_fu_577_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_113_reg_971 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_367 : BOOLEAN;
    signal tmp_53_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame_out_addr_reg_976 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_982_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_602_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_next_reg_986 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_117_fu_647_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_117_reg_991 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_389 : BOOLEAN;
    signal bgmodel_addr_17_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_398 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_bgmodel_ARREADY : STD_LOGIC;
    signal exitcond4_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond4_reg_1002_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_668_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_next1_reg_1006 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_58_fu_679_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_58_reg_1011 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_418 : BOOLEAN;
    signal tmp_119_fu_715_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_119_reg_1017 : STD_LOGIC_VECTOR (32 downto 0);
    signal frame_out_addr_2_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond5_reg_1028_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_fu_740_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_next2_reg_1032 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_123_fu_783_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_123_reg_1037 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_438 : BOOLEAN;
    signal bgmodel_addr_18_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_447 : BOOLEAN;
    signal exitcond6_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond6_reg_1048_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next3_fu_804_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_next3_reg_1052 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond7_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp4_stg0_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_464 : BOOLEAN;
    signal ap_reg_ppiten_pp4_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp4_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond7_reg_1057_pp4_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp4_it2 : STD_LOGIC := '0';
    signal indvar_next4_fu_821_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal part_bgmodel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal part_bgmodel_load_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_out_addr_3_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st56_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_500 : BOOLEAN;
    signal exitcond8_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp5_stg0_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_509 : BOOLEAN;
    signal ap_reg_ppiten_pp5_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp5_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond8_reg_1081_pp5_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_frame_out_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp5_it2 : STD_LOGIC := '0';
    signal indvar_next5_fu_852_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal extLd_fu_863_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal extLd_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond9_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp6_stg0_fsm_56 : STD_LOGIC;
    signal ap_sig_bdd_545 : BOOLEAN;
    signal ap_reg_ppiten_pp6_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp6_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond9_reg_1100_pp6_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp6_it2 : STD_LOGIC := '0';
    signal indvar_next6_fu_877_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal part2_bgmodel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal part2_bgmodel_load_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_out_addr_4_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st72_fsm_57 : STD_LOGIC;
    signal ap_sig_bdd_581 : BOOLEAN;
    signal exitcond2_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp7_stg0_fsm_62 : STD_LOGIC;
    signal ap_sig_bdd_590 : BOOLEAN;
    signal ap_reg_ppiten_pp7_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp7_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond2_reg_1124_pp7_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp7_it2 : STD_LOGIC := '0';
    signal indvar_next7_fu_908_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal extLd1_fu_919_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal extLd1_reg_1138 : STD_LOGIC_VECTOR (7 downto 0);
    signal part_1_fu_927_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal part_1_reg_1143 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st80_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_624 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_631 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_643 : BOOLEAN;
    signal ap_sig_cseq_ST_st36_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_655 : BOOLEAN;
    signal ap_sig_cseq_ST_st47_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_667 : BOOLEAN;
    signal ap_sig_cseq_ST_st52_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_679 : BOOLEAN;
    signal grp_bgsub_process_fu_466_ap_done : STD_LOGIC;
    signal grp_bgsub_process_fu_475_ap_done : STD_LOGIC;
    signal ap_sig_cseq_ST_st60_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_697 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_frame_out_AWREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st68_fsm_55 : STD_LOGIC;
    signal ap_sig_bdd_713 : BOOLEAN;
    signal ap_sig_cseq_ST_st76_fsm_61 : STD_LOGIC;
    signal ap_sig_bdd_727 : BOOLEAN;
    signal part_bgmodel_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal part_bgmodel_ce0 : STD_LOGIC;
    signal part_bgmodel_we0 : STD_LOGIC;
    signal part_bgmodel_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal part_bgmodel_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal part_bgmodel_ce1 : STD_LOGIC;
    signal part_bgmodel_we1 : STD_LOGIC;
    signal part_bgmodel_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal part_bgmodel_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal part_frame_in_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal part_frame_in_ce0 : STD_LOGIC;
    signal part_frame_in_we0 : STD_LOGIC;
    signal part_frame_in_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal part_frame_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal part_frame_out_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal part_frame_out_ce0 : STD_LOGIC;
    signal part_frame_out_we0 : STD_LOGIC;
    signal part_frame_out_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal part_frame_out_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal part2_bgmodel_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal part2_bgmodel_ce0 : STD_LOGIC;
    signal part2_bgmodel_we0 : STD_LOGIC;
    signal part2_bgmodel_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal part2_bgmodel_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal part2_bgmodel_ce1 : STD_LOGIC;
    signal part2_bgmodel_we1 : STD_LOGIC;
    signal part2_bgmodel_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal part2_bgmodel_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal part2_frame_in_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal part2_frame_in_ce0 : STD_LOGIC;
    signal part2_frame_in_we0 : STD_LOGIC;
    signal part2_frame_in_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal part2_frame_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal part2_frame_out_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal part2_frame_out_ce0 : STD_LOGIC;
    signal part2_frame_out_we0 : STD_LOGIC;
    signal part2_frame_out_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal part2_frame_out_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bgsub_process_fu_466_ap_start : STD_LOGIC;
    signal grp_bgsub_process_fu_466_ap_idle : STD_LOGIC;
    signal grp_bgsub_process_fu_466_ap_ready : STD_LOGIC;
    signal grp_bgsub_process_fu_466_frame_in_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_bgsub_process_fu_466_frame_in_ce0 : STD_LOGIC;
    signal grp_bgsub_process_fu_466_frame_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bgsub_process_fu_466_frame_out_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_bgsub_process_fu_466_frame_out_ce0 : STD_LOGIC;
    signal grp_bgsub_process_fu_466_frame_out_we0 : STD_LOGIC;
    signal grp_bgsub_process_fu_466_frame_out_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bgsub_process_fu_466_bgmodel_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgsub_process_fu_466_bgmodel_ce0 : STD_LOGIC;
    signal grp_bgsub_process_fu_466_bgmodel_we0 : STD_LOGIC;
    signal grp_bgsub_process_fu_466_bgmodel_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_466_bgmodel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_466_bgmodel_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgsub_process_fu_466_bgmodel_ce1 : STD_LOGIC;
    signal grp_bgsub_process_fu_466_bgmodel_we1 : STD_LOGIC;
    signal grp_bgsub_process_fu_466_bgmodel_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_466_bgmodel_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_466_learningRate : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_475_ap_start : STD_LOGIC;
    signal grp_bgsub_process_fu_475_ap_idle : STD_LOGIC;
    signal grp_bgsub_process_fu_475_ap_ready : STD_LOGIC;
    signal grp_bgsub_process_fu_475_frame_in_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_bgsub_process_fu_475_frame_in_ce0 : STD_LOGIC;
    signal grp_bgsub_process_fu_475_frame_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bgsub_process_fu_475_frame_out_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_bgsub_process_fu_475_frame_out_ce0 : STD_LOGIC;
    signal grp_bgsub_process_fu_475_frame_out_we0 : STD_LOGIC;
    signal grp_bgsub_process_fu_475_frame_out_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bgsub_process_fu_475_bgmodel_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgsub_process_fu_475_bgmodel_ce0 : STD_LOGIC;
    signal grp_bgsub_process_fu_475_bgmodel_we0 : STD_LOGIC;
    signal grp_bgsub_process_fu_475_bgmodel_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_475_bgmodel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_475_bgmodel_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgsub_process_fu_475_bgmodel_ce1 : STD_LOGIC;
    signal grp_bgsub_process_fu_475_bgmodel_we1 : STD_LOGIC;
    signal grp_bgsub_process_fu_475_bgmodel_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_475_bgmodel_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgsub_process_fu_475_learningRate : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_338 : STD_LOGIC_VECTOR (18 downto 0);
    signal learningRate_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_856 : BOOLEAN;
    signal ap_sig_bdd_859 : BOOLEAN;
    signal part_reg_362 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st84_fsm_67 : STD_LOGIC;
    signal ap_sig_bdd_872 : BOOLEAN;
    signal indvar_phi_fu_378_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar9_phi_fu_390_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar1_phi_fu_402_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar2_phi_fu_414_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgsub_process_fu_466_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st51_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_901 : BOOLEAN;
    signal grp_bgsub_process_fu_475_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_57_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_121_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_bgmodel_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_bgmodel_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_bgmodel_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_frame_out_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_frame_out_ARREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_1010 : BOOLEAN;
    signal ap_sig_cseq_ST_st30_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_1025 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_frame_out_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_frame_out_WREADY : STD_LOGIC := '0';
    signal tmp_111_fu_504_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl_fu_547_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_fu_559_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_555_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_cast_fu_567_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_114_fu_581_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl3_fu_613_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl4_fu_625_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_621_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl4_cast_fu_633_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_55_fu_637_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_116_fu_643_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_shl5_fu_685_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl6_fu_697_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_693_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl6_cast_fu_705_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_709_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_120_fu_719_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl7_fu_751_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl8_fu_762_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl7_cast_fu_758_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl8_cast_fu_769_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_62_fu_773_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_122_fu_779_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_125_fu_832_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_127_fu_888_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_sig_bdd_942 : BOOLEAN;
    signal ap_sig_bdd_972 : BOOLEAN;
    signal ap_sig_bdd_987 : BOOLEAN;
    signal ap_sig_bdd_953 : BOOLEAN;
    signal ap_sig_bdd_978 : BOOLEAN;
    signal ap_sig_bdd_994 : BOOLEAN;
    signal ap_sig_bdd_1564 : BOOLEAN;
    signal ap_sig_bdd_1044 : BOOLEAN;
    signal ap_sig_bdd_1057 : BOOLEAN;

    component bgsub_process IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        frame_in_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        frame_in_ce0 : OUT STD_LOGIC;
        frame_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        frame_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        frame_out_ce0 : OUT STD_LOGIC;
        frame_out_we0 : OUT STD_LOGIC;
        frame_out_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        bgmodel_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        bgmodel_ce0 : OUT STD_LOGIC;
        bgmodel_we0 : OUT STD_LOGIC;
        bgmodel_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bgmodel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bgmodel_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        bgmodel_ce1 : OUT STD_LOGIC;
        bgmodel_we1 : OUT STD_LOGIC;
        bgmodel_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bgmodel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        learningRate : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bgsub_Block_proc_part_bgmodel IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bgsub_Block_proc_part_frame_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bgsub_Block_proc_part_frame_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    part_bgmodel_U : component bgsub_Block_proc_part_bgmodel
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_bgmodel_address0,
        ce0 => part_bgmodel_ce0,
        we0 => part_bgmodel_we0,
        d0 => part_bgmodel_d0,
        q0 => part_bgmodel_q0,
        address1 => part_bgmodel_address1,
        ce1 => part_bgmodel_ce1,
        we1 => part_bgmodel_we1,
        d1 => part_bgmodel_d1,
        q1 => part_bgmodel_q1);

    part_frame_in_U : component bgsub_Block_proc_part_frame_in
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_frame_in_address0,
        ce0 => part_frame_in_ce0,
        we0 => part_frame_in_we0,
        d0 => part_frame_in_d0,
        q0 => part_frame_in_q0);

    part_frame_out_U : component bgsub_Block_proc_part_frame_out
    generic map (
        DataWidth => 1,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part_frame_out_address0,
        ce0 => part_frame_out_ce0,
        we0 => part_frame_out_we0,
        d0 => part_frame_out_d0,
        q0 => part_frame_out_q0);

    part2_bgmodel_U : component bgsub_Block_proc_part_bgmodel
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part2_bgmodel_address0,
        ce0 => part2_bgmodel_ce0,
        we0 => part2_bgmodel_we0,
        d0 => part2_bgmodel_d0,
        q0 => part2_bgmodel_q0,
        address1 => part2_bgmodel_address1,
        ce1 => part2_bgmodel_ce1,
        we1 => part2_bgmodel_we1,
        d1 => part2_bgmodel_d1,
        q1 => part2_bgmodel_q1);

    part2_frame_in_U : component bgsub_Block_proc_part_frame_in
    generic map (
        DataWidth => 8,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part2_frame_in_address0,
        ce0 => part2_frame_in_ce0,
        we0 => part2_frame_in_we0,
        d0 => part2_frame_in_d0,
        q0 => part2_frame_in_q0);

    part2_frame_out_U : component bgsub_Block_proc_part_frame_out
    generic map (
        DataWidth => 1,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => part2_frame_out_address0,
        ce0 => part2_frame_out_ce0,
        we0 => part2_frame_out_we0,
        d0 => part2_frame_out_d0,
        q0 => part2_frame_out_q0);

    grp_bgsub_process_fu_466 : component bgsub_process
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bgsub_process_fu_466_ap_start,
        ap_done => grp_bgsub_process_fu_466_ap_done,
        ap_idle => grp_bgsub_process_fu_466_ap_idle,
        ap_ready => grp_bgsub_process_fu_466_ap_ready,
        frame_in_address0 => grp_bgsub_process_fu_466_frame_in_address0,
        frame_in_ce0 => grp_bgsub_process_fu_466_frame_in_ce0,
        frame_in_q0 => grp_bgsub_process_fu_466_frame_in_q0,
        frame_out_address0 => grp_bgsub_process_fu_466_frame_out_address0,
        frame_out_ce0 => grp_bgsub_process_fu_466_frame_out_ce0,
        frame_out_we0 => grp_bgsub_process_fu_466_frame_out_we0,
        frame_out_d0 => grp_bgsub_process_fu_466_frame_out_d0,
        bgmodel_address0 => grp_bgsub_process_fu_466_bgmodel_address0,
        bgmodel_ce0 => grp_bgsub_process_fu_466_bgmodel_ce0,
        bgmodel_we0 => grp_bgsub_process_fu_466_bgmodel_we0,
        bgmodel_d0 => grp_bgsub_process_fu_466_bgmodel_d0,
        bgmodel_q0 => grp_bgsub_process_fu_466_bgmodel_q0,
        bgmodel_address1 => grp_bgsub_process_fu_466_bgmodel_address1,
        bgmodel_ce1 => grp_bgsub_process_fu_466_bgmodel_ce1,
        bgmodel_we1 => grp_bgsub_process_fu_466_bgmodel_we1,
        bgmodel_d1 => grp_bgsub_process_fu_466_bgmodel_d1,
        bgmodel_q1 => grp_bgsub_process_fu_466_bgmodel_q1,
        learningRate => grp_bgsub_process_fu_466_learningRate);

    grp_bgsub_process_fu_475 : component bgsub_process
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bgsub_process_fu_475_ap_start,
        ap_done => grp_bgsub_process_fu_475_ap_done,
        ap_idle => grp_bgsub_process_fu_475_ap_idle,
        ap_ready => grp_bgsub_process_fu_475_ap_ready,
        frame_in_address0 => grp_bgsub_process_fu_475_frame_in_address0,
        frame_in_ce0 => grp_bgsub_process_fu_475_frame_in_ce0,
        frame_in_q0 => grp_bgsub_process_fu_475_frame_in_q0,
        frame_out_address0 => grp_bgsub_process_fu_475_frame_out_address0,
        frame_out_ce0 => grp_bgsub_process_fu_475_frame_out_ce0,
        frame_out_we0 => grp_bgsub_process_fu_475_frame_out_we0,
        frame_out_d0 => grp_bgsub_process_fu_475_frame_out_d0,
        bgmodel_address0 => grp_bgsub_process_fu_475_bgmodel_address0,
        bgmodel_ce0 => grp_bgsub_process_fu_475_bgmodel_ce0,
        bgmodel_we0 => grp_bgsub_process_fu_475_bgmodel_we0,
        bgmodel_d0 => grp_bgsub_process_fu_475_bgmodel_d0,
        bgmodel_q0 => grp_bgsub_process_fu_475_bgmodel_q0,
        bgmodel_address1 => grp_bgsub_process_fu_475_bgmodel_address1,
        bgmodel_ce1 => grp_bgsub_process_fu_475_bgmodel_ce1,
        bgmodel_we1 => grp_bgsub_process_fu_475_bgmodel_we1,
        bgmodel_d1 => grp_bgsub_process_fu_475_bgmodel_d1,
        bgmodel_q1 => grp_bgsub_process_fu_475_bgmodel_q1,
        learningRate => grp_bgsub_process_fu_475_learningRate);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_53_fu_541_p2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_bgmodel_ARREADY assign process. --
    ap_reg_ioackin_m_axi_bgmodel_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_bgmodel_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_16) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_ARREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34)))) then 
                    ap_reg_ioackin_m_axi_bgmodel_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_16) and (ap_const_logic_1 = m_axi_bgmodel_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) and (ap_const_logic_1 = m_axi_bgmodel_ARREADY)))) then 
                    ap_reg_ioackin_m_axi_bgmodel_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_bgmodel_AWREADY assign process. --
    ap_reg_ioackin_m_axi_bgmodel_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_bgmodel_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = init)) and not((ap_sig_bdd_326 or (not((ap_const_lv1_0 = init)) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (m_axi_frame_out_BVALID = ap_const_logic_0)))))) then 
                    ap_reg_ioackin_m_axi_bgmodel_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = init)) and (ap_const_logic_1 = m_axi_bgmodel_AWREADY) and not(ap_sig_bdd_326)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and (ap_const_logic_1 = m_axi_bgmodel_AWREADY) and not(((ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not((m_axi_frame_out_BVALID = ap_const_logic_0)) and (ap_const_logic_1 = m_axi_bgmodel_AWREADY)))) then 
                    ap_reg_ioackin_m_axi_bgmodel_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_bgmodel_WREADY assign process. --
    ap_reg_ioackin_m_axi_bgmodel_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_bgmodel_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_529_p2) and not(((ap_const_lv1_0 = exitcond_fu_529_p2) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY)))) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2)))) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2)))))) then 
                    ap_reg_ioackin_m_axi_bgmodel_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_529_p2) and (ap_const_logic_1 = m_axi_bgmodel_WREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and (ap_const_logic_1 = m_axi_bgmodel_WREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2) and (ap_const_logic_1 = m_axi_bgmodel_WREADY)))) then 
                    ap_reg_ioackin_m_axi_bgmodel_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_frame_out_ARREADY assign process. --
    ap_reg_ioackin_m_axi_frame_out_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_frame_out_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_ARREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25)))) then 
                    ap_reg_ioackin_m_axi_frame_out_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = m_axi_frame_out_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) or ((ap_const_logic_1 = m_axi_frame_out_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25)))) then 
                    ap_reg_ioackin_m_axi_frame_out_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_frame_out_AWREADY assign process. --
    ap_reg_ioackin_m_axi_frame_out_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_frame_out_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49) and not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY)))) or (not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))) and (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61)))) then 
                    ap_reg_ioackin_m_axi_frame_out_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49) and (ap_const_logic_1 = m_axi_frame_out_AWREADY) and not((m_axi_bgmodel_BVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61) and (ap_const_logic_1 = m_axi_frame_out_AWREADY) and not((m_axi_bgmodel_BVALID = ap_const_logic_0))))) then 
                    ap_reg_ioackin_m_axi_frame_out_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_frame_out_WREADY assign process. --
    ap_reg_ioackin_m_axi_frame_out_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_frame_out_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2)))) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2)))))) then 
                    ap_reg_ioackin_m_axi_frame_out_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and (ap_const_logic_1 = m_axi_frame_out_WREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2) and (ap_const_logic_1 = m_axi_frame_out_WREADY)))) then 
                    ap_reg_ioackin_m_axi_frame_out_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_596_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond1_fu_596_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_596_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond4_fu_662_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_22)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond4_fu_662_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond4_fu_662_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_22)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_734_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_31)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and (ap_const_lv1_0 = exitcond5_fu_734_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_31) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_734_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_31)) then 
                    ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) and not((ap_const_lv1_0 = exitcond6_fu_798_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_40)) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) and (ap_const_lv1_0 = exitcond6_fu_798_p2))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_40) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) and not((ap_const_lv1_0 = exitcond6_fu_798_p2))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it2 assign process. --
    ap_reg_ppiten_pp3_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) then 
                    ap_reg_ppiten_pp3_it2 <= ap_reg_ppiten_pp3_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_40)) then 
                    ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it0 assign process. --
    ap_reg_ppiten_pp4_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_44) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and not((ap_const_lv1_0 = exitcond7_fu_815_p2)))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done))))) then 
                    ap_reg_ppiten_pp4_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it1 assign process. --
    ap_reg_ppiten_pp4_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_44) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and (ap_const_lv1_0 = exitcond7_fu_815_p2))) then 
                    ap_reg_ppiten_pp4_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_44) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and not((ap_const_lv1_0 = exitcond7_fu_815_p2))))) then 
                    ap_reg_ppiten_pp4_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp4_it2 assign process. --
    ap_reg_ppiten_pp4_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp4_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2)))) then 
                    ap_reg_ppiten_pp4_it2 <= ap_reg_ppiten_pp4_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done))))) then 
                    ap_reg_ppiten_pp4_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it0 assign process. --
    ap_reg_ppiten_pp5_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_50) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond8_fu_846_p2)))) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49) and not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))))) then 
                    ap_reg_ppiten_pp5_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it1 assign process. --
    ap_reg_ppiten_pp5_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_50) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond8_fu_846_p2))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49) and not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_50) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond8_fu_846_p2))))) then 
                    ap_reg_ppiten_pp5_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp5_it2 assign process. --
    ap_reg_ppiten_pp5_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp5_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2)))) then 
                    ap_reg_ppiten_pp5_it2 <= ap_reg_ppiten_pp5_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49) and not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))))) then 
                    ap_reg_ppiten_pp5_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp6_it0 assign process. --
    ap_reg_ppiten_pp6_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp6_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp6_stg0_fsm_56) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and not((ap_const_lv1_0 = exitcond9_fu_871_p2)))) then 
                    ap_reg_ppiten_pp6_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (m_axi_frame_out_BVALID = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp6_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp6_it1 assign process. --
    ap_reg_ppiten_pp6_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp6_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp6_stg0_fsm_56) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and (ap_const_lv1_0 = exitcond9_fu_871_p2))) then 
                    ap_reg_ppiten_pp6_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (m_axi_frame_out_BVALID = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp6_stg0_fsm_56) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and not((ap_const_lv1_0 = exitcond9_fu_871_p2))))) then 
                    ap_reg_ppiten_pp6_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp6_it2 assign process. --
    ap_reg_ppiten_pp6_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp6_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2)))) then 
                    ap_reg_ppiten_pp6_it2 <= ap_reg_ppiten_pp6_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (m_axi_frame_out_BVALID = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp6_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp7_it0 assign process. --
    ap_reg_ppiten_pp7_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp7_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp7_stg0_fsm_62) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and not((ap_const_lv1_0 = exitcond2_fu_902_p2)))) then 
                    ap_reg_ppiten_pp7_it0 <= ap_const_logic_0;
                elsif ((not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))) and (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61))) then 
                    ap_reg_ppiten_pp7_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp7_it1 assign process. --
    ap_reg_ppiten_pp7_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp7_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp7_stg0_fsm_62) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and (ap_const_lv1_0 = exitcond2_fu_902_p2))) then 
                    ap_reg_ppiten_pp7_it1 <= ap_const_logic_1;
                elsif (((not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))) and (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp7_stg0_fsm_62) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and not((ap_const_lv1_0 = exitcond2_fu_902_p2))))) then 
                    ap_reg_ppiten_pp7_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp7_it2 assign process. --
    ap_reg_ppiten_pp7_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp7_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2)))) then 
                    ap_reg_ppiten_pp7_it2 <= ap_reg_ppiten_pp7_it1;
                elsif ((not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))) and (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61))) then 
                    ap_reg_ppiten_pp7_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_bgsub_process_fu_466_ap_start_ap_start_reg assign process. --
    grp_bgsub_process_fu_466_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bgsub_process_fu_466_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_42)) then 
                    grp_bgsub_process_fu_466_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_bgsub_process_fu_466_ap_ready)) then 
                    grp_bgsub_process_fu_466_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_bgsub_process_fu_475_ap_start_ap_start_reg assign process. --
    grp_bgsub_process_fu_475_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bgsub_process_fu_475_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_42)) then 
                    grp_bgsub_process_fu_475_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_bgsub_process_fu_475_ap_ready)) then 
                    grp_bgsub_process_fu_475_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar1_reg_398 assign process. --
    indvar1_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and (ap_const_lv1_0 = exitcond5_reg_1028) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then 
                indvar1_reg_398 <= indvar_next2_reg_1032;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_31)) then 
                indvar1_reg_398 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- indvar2_reg_410 assign process. --
    indvar2_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and (ap_const_lv1_0 = exitcond6_reg_1048) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then 
                indvar2_reg_410 <= indvar_next3_reg_1052;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_40)) then 
                indvar2_reg_410 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- indvar3_reg_422 assign process. --
    indvar3_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and (ap_const_lv1_0 = exitcond7_fu_815_p2))) then 
                indvar3_reg_422 <= indvar_next4_fu_821_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done))))) then 
                indvar3_reg_422 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- indvar4_reg_433 assign process. --
    indvar4_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49) and not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))))) then 
                indvar4_reg_433 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_50) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond8_fu_846_p2))) then 
                indvar4_reg_433 <= indvar_next5_fu_852_p2;
            end if; 
        end if;
    end process;

    -- indvar5_reg_444 assign process. --
    indvar5_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (m_axi_frame_out_BVALID = ap_const_logic_0))))) then 
                indvar5_reg_444 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp6_stg0_fsm_56) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and (ap_const_lv1_0 = exitcond9_fu_871_p2))) then 
                indvar5_reg_444 <= indvar_next6_fu_877_p2;
            end if; 
        end if;
    end process;

    -- indvar6_reg_455 assign process. --
    indvar6_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))) and (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61))) then 
                indvar6_reg_455 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp7_stg0_fsm_62) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and (ap_const_lv1_0 = exitcond2_fu_902_p2))) then 
                indvar6_reg_455 <= indvar_next7_fu_908_p2;
            end if; 
        end if;
    end process;

    -- indvar9_reg_386 assign process. --
    indvar9_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and (ap_const_lv1_0 = exitcond4_reg_1002) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                indvar9_reg_386 <= indvar_next1_reg_1006;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_22)) then 
                indvar9_reg_386 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_374 assign process. --
    indvar_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (exitcond1_reg_982 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_374 <= indvar_next_reg_986;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                indvar_reg_374 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- learningRate_reg_349 assign process. --
    learningRate_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = init)) and (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_bdd_859))) then 
                learningRate_reg_349(23) <= '1';
                learningRate_reg_349(24) <= '1';
                learningRate_reg_349(25) <= '1';
                learningRate_reg_349(26) <= '1';
                learningRate_reg_349(27) <= '1';
                learningRate_reg_349(28) <= '1';
                learningRate_reg_349(29) <= '1';
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (ap_const_lv1_0 = init) and not((ap_sig_bdd_326 or (not((ap_const_lv1_0 = init)) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY)))))) then 
                learningRate_reg_349(23) <= '0';
                learningRate_reg_349(24) <= '0';
                learningRate_reg_349(25) <= '0';
                learningRate_reg_349(26) <= '0';
                learningRate_reg_349(27) <= '0';
                learningRate_reg_349(28) <= '0';
                learningRate_reg_349(29) <= '0';
            end if; 
        end if;
    end process;

    -- p_reg_338 assign process. --
    p_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = init)) and not((ap_sig_bdd_326 or (not((ap_const_lv1_0 = init)) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY)))))) then 
                p_reg_338 <= ap_const_lv19_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_529_p2) and not(((ap_const_lv1_0 = exitcond_fu_529_p2) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY))))) then 
                p_reg_338 <= p_1_fu_535_p2;
            end if; 
        end if;
    end process;

    -- part_reg_362 assign process. --
    part_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st84_fsm_67) and not((m_axi_frame_out_BVALID = ap_const_logic_0)))) then 
                part_reg_362 <= part_1_reg_1143;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_bdd_859))) then 
                part_reg_362 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond1_reg_982_pp0_it1 <= exitcond1_reg_982;
                ap_reg_ppstg_indvar_reg_374_pp0_it1 <= indvar_reg_374;
                exitcond1_reg_982 <= exitcond1_fu_596_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp7_stg0_fsm_62) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))))) then
                ap_reg_ppstg_exitcond2_reg_1124_pp7_it1 <= exitcond2_reg_1124;
                exitcond2_reg_1124 <= exitcond2_fu_902_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                ap_reg_ppstg_exitcond4_reg_1002_pp1_it1 <= exitcond4_reg_1002;
                ap_reg_ppstg_indvar9_reg_386_pp1_it1 <= indvar9_reg_386;
                exitcond4_reg_1002 <= exitcond4_fu_662_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                ap_reg_ppstg_exitcond5_reg_1028_pp2_it1 <= exitcond5_reg_1028;
                ap_reg_ppstg_indvar1_reg_398_pp2_it1 <= indvar1_reg_398;
                exitcond5_reg_1028 <= exitcond5_fu_734_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                ap_reg_ppstg_exitcond6_reg_1048_pp3_it1 <= exitcond6_reg_1048;
                ap_reg_ppstg_indvar2_reg_410_pp3_it1 <= indvar2_reg_410;
                exitcond6_reg_1048 <= exitcond6_fu_798_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_44) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))))) then
                ap_reg_ppstg_exitcond7_reg_1057_pp4_it1 <= exitcond7_reg_1057;
                exitcond7_reg_1057 <= exitcond7_fu_815_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_50) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))))) then
                ap_reg_ppstg_exitcond8_reg_1081_pp5_it1 <= exitcond8_reg_1081;
                exitcond8_reg_1081 <= exitcond8_fu_846_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp6_stg0_fsm_56) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))))) then
                ap_reg_ppstg_exitcond9_reg_1100_pp6_it1 <= exitcond9_reg_1100;
                exitcond9_reg_1100 <= exitcond9_fu_871_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_16) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_ARREADY)))) then
                    bgmodel_addr_17_reg_996(30 downto 0) <= tmp_118_fu_652_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_ARREADY)) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34))) then
                    bgmodel_addr_18_reg_1042(30 downto 0) <= tmp_124_fu_788_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp7_stg0_fsm_62) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and (ap_const_lv1_0 = exitcond2_reg_1124))) then
                extLd1_reg_1138 <= extLd1_fu_919_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_50) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and (ap_const_lv1_0 = exitcond8_reg_1081))) then
                extLd_reg_1095 <= extLd_fu_863_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then
                frame_out_addr_2_reg_1022 <= tmp_121_fu_724_p1(32 - 1 downto 0);
                    tmp_119_reg_1017(15 downto 7) <= tmp_119_fu_715_p1(15 downto 7);
                    tmp_58_reg_1011(6 downto 1) <= tmp_58_fu_679_p2(6 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_45)) then
                frame_out_addr_3_reg_1076 <= tmp_126_fu_836_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_57)) then
                frame_out_addr_4_reg_1119 <= tmp_128_fu_892_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_53_fu_541_p2)))) then
                frame_out_addr_reg_976 <= tmp_115_fu_586_p1(32 - 1 downto 0);
                    tmp_113_reg_971(15 downto 6) <= tmp_113_fu_577_p1(15 downto 6);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                indvar_next1_reg_1006 <= indvar_next1_fu_668_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                indvar_next2_reg_1032 <= indvar_next2_fu_740_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                indvar_next3_reg_1052 <= indvar_next3_fu_804_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_986 <= indvar_next_fu_602_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp6_stg0_fsm_56) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it1) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and (ap_const_lv1_0 = exitcond9_reg_1100))) then
                part2_bgmodel_load_reg_1114 <= part2_bgmodel_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_63)) then
                part_1_reg_1143 <= part_1_fu_927_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it1) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and (ap_const_lv1_0 = exitcond7_reg_1057))) then
                part_bgmodel_load_reg_1071 <= part_bgmodel_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (exitcond1_reg_982 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and (ap_const_lv1_0 = exitcond5_reg_1028) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                reg_484 <= m_axi_frame_out_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and (ap_const_lv1_0 = exitcond4_reg_1002) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and (ap_const_lv1_0 = exitcond6_reg_1048) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then
                reg_490 <= m_axi_bgmodel_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_sig_bdd_326 or (not((ap_const_lv1_0 = init)) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY)))))) then
                tmp_111_cast_reg_937 <= tmp_111_cast_fu_496_p1;
                tmp_112_cast_reg_943 <= tmp_112_cast_fu_500_p1;
                    tmp_113_cast_reg_949(29 downto 0) <= tmp_113_cast_fu_514_p1(29 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_15)) then
                tmp_117_reg_991 <= tmp_117_fu_647_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_33)) then
                tmp_123_reg_1037 <= tmp_123_fu_783_p2;
            end if;
        end if;
    end process;
    tmp_113_cast_reg_949(30) <= '0';
    tmp_113_reg_971(5 downto 0) <= "000000";
    tmp_113_reg_971(32 downto 16) <= "00000000000000000";
    bgmodel_addr_17_reg_996(31) <= '0';
    tmp_58_reg_1011(0) <= '1';
    tmp_119_reg_1017(6 downto 0) <= "1000000";
    tmp_119_reg_1017(32 downto 16) <= "00000000000000000";
    bgmodel_addr_18_reg_1042(31) <= '0';
    learningRate_reg_349(22 downto 0) <= "00000000000000000000000";
    learningRate_reg_349(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, init, m_axi_bgmodel_BVALID, m_axi_frame_out_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_217, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_241, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppiten_pp2_it0, ap_sig_bdd_264, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_reg_ppiten_pp3_it0, ap_sig_bdd_287, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it2, ap_sig_bdd_326, ap_sig_ioackin_m_axi_bgmodel_AWREADY, exitcond_fu_529_p2, ap_sig_ioackin_m_axi_bgmodel_WREADY, tmp_53_fu_541_p2, exitcond1_fu_596_p2, ap_sig_ioackin_m_axi_bgmodel_ARREADY, exitcond4_fu_662_p2, exitcond5_fu_734_p2, exitcond6_fu_798_p2, exitcond7_fu_815_p2, ap_reg_ppiten_pp4_it0, ap_reg_ppiten_pp4_it1, ap_reg_ppstg_exitcond7_reg_1057_pp4_it1, ap_reg_ppiten_pp4_it2, exitcond8_fu_846_p2, ap_reg_ppiten_pp5_it0, ap_reg_ppiten_pp5_it1, ap_reg_ppstg_exitcond8_reg_1081_pp5_it1, ap_sig_ioackin_m_axi_frame_out_WREADY, ap_reg_ppiten_pp5_it2, exitcond9_fu_871_p2, ap_reg_ppiten_pp6_it0, ap_reg_ppiten_pp6_it1, ap_reg_ppstg_exitcond9_reg_1100_pp6_it1, ap_reg_ppiten_pp6_it2, exitcond2_fu_902_p2, ap_reg_ppiten_pp7_it0, ap_reg_ppiten_pp7_it1, ap_reg_ppstg_exitcond2_reg_1124_pp7_it1, ap_reg_ppiten_pp7_it2, grp_bgsub_process_fu_466_ap_done, grp_bgsub_process_fu_475_ap_done, ap_sig_ioackin_m_axi_frame_out_AWREADY, ap_sig_bdd_859, ap_sig_ioackin_m_axi_frame_out_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_const_lv1_0 = init)) and not((ap_sig_bdd_326 or (not((ap_const_lv1_0 = init)) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY)))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((ap_const_lv1_0 = init) and not((ap_sig_bdd_326 or (not((ap_const_lv1_0 = init)) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY)))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((ap_const_lv1_0 = exitcond_fu_529_p2) and not(((ap_const_lv1_0 = exitcond_fu_529_p2) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not(((ap_const_lv1_0 = exitcond_fu_529_p2) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY))) and not((ap_const_lv1_0 = exitcond_fu_529_p2)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not(ap_sig_bdd_859)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = tmp_53_fu_541_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_14;
            when ap_ST_pp0_stg0_fsm_14 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_596_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_14;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond1_fu_596_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_14;
                end if;
            when ap_ST_st18_fsm_15 => 
                ap_NS_fsm <= ap_ST_st19_fsm_16;
            when ap_ST_st19_fsm_16 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_16;
                end if;
            when ap_ST_st20_fsm_17 => 
                ap_NS_fsm <= ap_ST_st21_fsm_18;
            when ap_ST_st21_fsm_18 => 
                ap_NS_fsm <= ap_ST_st22_fsm_19;
            when ap_ST_st22_fsm_19 => 
                ap_NS_fsm <= ap_ST_st23_fsm_20;
            when ap_ST_st23_fsm_20 => 
                ap_NS_fsm <= ap_ST_st24_fsm_21;
            when ap_ST_st24_fsm_21 => 
                ap_NS_fsm <= ap_ST_st25_fsm_22;
            when ap_ST_st25_fsm_22 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_23;
            when ap_ST_pp1_stg0_fsm_23 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond4_fu_662_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_23;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond4_fu_662_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_23;
                end if;
            when ap_ST_st29_fsm_24 => 
                ap_NS_fsm <= ap_ST_st30_fsm_25;
            when ap_ST_st30_fsm_25 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st30_fsm_25;
                end if;
            when ap_ST_st31_fsm_26 => 
                ap_NS_fsm <= ap_ST_st32_fsm_27;
            when ap_ST_st32_fsm_27 => 
                ap_NS_fsm <= ap_ST_st33_fsm_28;
            when ap_ST_st33_fsm_28 => 
                ap_NS_fsm <= ap_ST_st34_fsm_29;
            when ap_ST_st34_fsm_29 => 
                ap_NS_fsm <= ap_ST_st35_fsm_30;
            when ap_ST_st35_fsm_30 => 
                ap_NS_fsm <= ap_ST_st36_fsm_31;
            when ap_ST_st36_fsm_31 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_32;
            when ap_ST_pp2_stg0_fsm_32 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_734_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_32;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and not((ap_const_lv1_0 = exitcond5_fu_734_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_st40_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_32;
                end if;
            when ap_ST_st40_fsm_33 => 
                ap_NS_fsm <= ap_ST_st41_fsm_34;
            when ap_ST_st41_fsm_34 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_34;
                end if;
            when ap_ST_st42_fsm_35 => 
                ap_NS_fsm <= ap_ST_st43_fsm_36;
            when ap_ST_st43_fsm_36 => 
                ap_NS_fsm <= ap_ST_st44_fsm_37;
            when ap_ST_st44_fsm_37 => 
                ap_NS_fsm <= ap_ST_st45_fsm_38;
            when ap_ST_st45_fsm_38 => 
                ap_NS_fsm <= ap_ST_st46_fsm_39;
            when ap_ST_st46_fsm_39 => 
                ap_NS_fsm <= ap_ST_st47_fsm_40;
            when ap_ST_st47_fsm_40 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_41;
            when ap_ST_pp3_stg0_fsm_41 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) and not((ap_const_lv1_0 = exitcond6_fu_798_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_41;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) and not((ap_const_lv1_0 = exitcond6_fu_798_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_st51_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_41;
                end if;
            when ap_ST_st51_fsm_42 => 
                ap_NS_fsm <= ap_ST_st52_fsm_43;
            when ap_ST_st52_fsm_43 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done)))) then
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_44;
                else
                    ap_NS_fsm <= ap_ST_st52_fsm_43;
                end if;
            when ap_ST_pp4_stg0_fsm_44 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and not((ap_const_lv1_0 = exitcond7_fu_815_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_44;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2))) and not((ap_const_lv1_0 = exitcond7_fu_815_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp4_it1))))) then
                    ap_NS_fsm <= ap_ST_st56_fsm_45;
                else
                    ap_NS_fsm <= ap_ST_pp4_stg0_fsm_44;
                end if;
            when ap_ST_st56_fsm_45 => 
                ap_NS_fsm <= ap_ST_st57_fsm_46;
            when ap_ST_st57_fsm_46 => 
                ap_NS_fsm <= ap_ST_st58_fsm_47;
            when ap_ST_st58_fsm_47 => 
                ap_NS_fsm <= ap_ST_st59_fsm_48;
            when ap_ST_st59_fsm_48 => 
                ap_NS_fsm <= ap_ST_st60_fsm_49;
            when ap_ST_st60_fsm_49 => 
                if (not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY)))) then
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_50;
                else
                    ap_NS_fsm <= ap_ST_st60_fsm_49;
                end if;
            when ap_ST_pp5_stg0_fsm_50 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond8_fu_846_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_50;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))) and not((ap_const_lv1_0 = exitcond8_fu_846_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp5_it1))))) then
                    ap_NS_fsm <= ap_ST_st64_fsm_51;
                else
                    ap_NS_fsm <= ap_ST_pp5_stg0_fsm_50;
                end if;
            when ap_ST_st64_fsm_51 => 
                ap_NS_fsm <= ap_ST_st65_fsm_52;
            when ap_ST_st65_fsm_52 => 
                ap_NS_fsm <= ap_ST_st66_fsm_53;
            when ap_ST_st66_fsm_53 => 
                ap_NS_fsm <= ap_ST_st67_fsm_54;
            when ap_ST_st67_fsm_54 => 
                ap_NS_fsm <= ap_ST_st68_fsm_55;
            when ap_ST_st68_fsm_55 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (m_axi_frame_out_BVALID = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_pp6_stg0_fsm_56;
                else
                    ap_NS_fsm <= ap_ST_st68_fsm_55;
                end if;
            when ap_ST_pp6_stg0_fsm_56 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp6_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp6_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp6_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and not((ap_const_lv1_0 = exitcond9_fu_871_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp6_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp6_stg0_fsm_56;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp6_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp6_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp6_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2))) and not((ap_const_lv1_0 = exitcond9_fu_871_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp6_it1))))) then
                    ap_NS_fsm <= ap_ST_st72_fsm_57;
                else
                    ap_NS_fsm <= ap_ST_pp6_stg0_fsm_56;
                end if;
            when ap_ST_st72_fsm_57 => 
                ap_NS_fsm <= ap_ST_st73_fsm_58;
            when ap_ST_st73_fsm_58 => 
                ap_NS_fsm <= ap_ST_st74_fsm_59;
            when ap_ST_st74_fsm_59 => 
                ap_NS_fsm <= ap_ST_st75_fsm_60;
            when ap_ST_st75_fsm_60 => 
                ap_NS_fsm <= ap_ST_st76_fsm_61;
            when ap_ST_st76_fsm_61 => 
                if (not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY)))) then
                    ap_NS_fsm <= ap_ST_pp7_stg0_fsm_62;
                else
                    ap_NS_fsm <= ap_ST_st76_fsm_61;
                end if;
            when ap_ST_pp7_stg0_fsm_62 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp7_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp7_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp7_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and not((ap_const_lv1_0 = exitcond2_fu_902_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp7_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp7_stg0_fsm_62;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp7_it2) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp7_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp7_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))) and not((ap_const_lv1_0 = exitcond2_fu_902_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp7_it1))))) then
                    ap_NS_fsm <= ap_ST_st80_fsm_63;
                else
                    ap_NS_fsm <= ap_ST_pp7_stg0_fsm_62;
                end if;
            when ap_ST_st80_fsm_63 => 
                ap_NS_fsm <= ap_ST_st81_fsm_64;
            when ap_ST_st81_fsm_64 => 
                ap_NS_fsm <= ap_ST_st82_fsm_65;
            when ap_ST_st82_fsm_65 => 
                ap_NS_fsm <= ap_ST_st83_fsm_66;
            when ap_ST_st83_fsm_66 => 
                ap_NS_fsm <= ap_ST_st84_fsm_67;
            when ap_ST_st84_fsm_67 => 
                if (not((m_axi_frame_out_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st84_fsm_67;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st7_fsm_6, tmp_53_fu_541_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_53_fu_541_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_53_fu_541_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_53_fu_541_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_1010 assign process. --
    ap_sig_bdd_1010_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1010 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_1025 assign process. --
    ap_sig_bdd_1025_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_1025 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_1044 assign process. --
    ap_sig_bdd_1044_assign_proc : process(ap_reg_ppstg_exitcond8_reg_1081_pp5_it1, ap_reg_ppiten_pp5_it2)
    begin
                ap_sig_bdd_1044 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2));
    end process;


    -- ap_sig_bdd_1057 assign process. --
    ap_sig_bdd_1057_assign_proc : process(ap_reg_ppstg_exitcond2_reg_1124_pp7_it1, ap_reg_ppiten_pp7_it2)
    begin
                ap_sig_bdd_1057 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2));
    end process;


    -- ap_sig_bdd_1564 assign process. --
    ap_sig_bdd_1564_assign_proc : process(m_axi_bgmodel_BVALID, ap_reg_ioackin_m_axi_frame_out_AWREADY)
    begin
                ap_sig_bdd_1564 <= (not((m_axi_bgmodel_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_AWREADY));
    end process;


    -- ap_sig_bdd_208 assign process. --
    ap_sig_bdd_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_208 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_217 assign process. --
    ap_sig_bdd_217_assign_proc : process(m_axi_frame_out_RVALID, exitcond1_reg_982)
    begin
                ap_sig_bdd_217 <= ((m_axi_frame_out_RVALID = ap_const_logic_0) and (exitcond1_reg_982 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_241 assign process. --
    ap_sig_bdd_241_assign_proc : process(m_axi_bgmodel_RVALID, exitcond4_reg_1002)
    begin
                ap_sig_bdd_241 <= ((m_axi_bgmodel_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond4_reg_1002));
    end process;


    -- ap_sig_bdd_257 assign process. --
    ap_sig_bdd_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_257 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_264 assign process. --
    ap_sig_bdd_264_assign_proc : process(m_axi_frame_out_RVALID, exitcond5_reg_1028)
    begin
                ap_sig_bdd_264 <= ((m_axi_frame_out_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond5_reg_1028));
    end process;


    -- ap_sig_bdd_280 assign process. --
    ap_sig_bdd_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_280 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_287 assign process. --
    ap_sig_bdd_287_assign_proc : process(m_axi_bgmodel_RVALID, exitcond6_reg_1048)
    begin
                ap_sig_bdd_287 <= ((m_axi_bgmodel_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond6_reg_1048));
    end process;


    -- ap_sig_bdd_326 assign process. --
    ap_sig_bdd_326_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_326 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_351 assign process. --
    ap_sig_bdd_351_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_351 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_367 assign process. --
    ap_sig_bdd_367_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_367 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_389 assign process. --
    ap_sig_bdd_389_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_389 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_398 assign process. --
    ap_sig_bdd_398_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_398 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_418 assign process. --
    ap_sig_bdd_418_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_418 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_438 assign process. --
    ap_sig_bdd_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_438 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_447 assign process. --
    ap_sig_bdd_447_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_447 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_464 assign process. --
    ap_sig_bdd_464_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_464 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_500 assign process. --
    ap_sig_bdd_500_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_500 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_509 assign process. --
    ap_sig_bdd_509_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_509 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_545 assign process. --
    ap_sig_bdd_545_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_545 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    -- ap_sig_bdd_581 assign process. --
    ap_sig_bdd_581_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_581 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    -- ap_sig_bdd_590 assign process. --
    ap_sig_bdd_590_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_590 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    -- ap_sig_bdd_624 assign process. --
    ap_sig_bdd_624_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_624 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_631 assign process. --
    ap_sig_bdd_631_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_631 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_643 assign process. --
    ap_sig_bdd_643_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_643 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_655 assign process. --
    ap_sig_bdd_655_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_655 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_667 assign process. --
    ap_sig_bdd_667_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_667 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_679 assign process. --
    ap_sig_bdd_679_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_679 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_697 assign process. --
    ap_sig_bdd_697_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_697 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_713 assign process. --
    ap_sig_bdd_713_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_713 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    -- ap_sig_bdd_727 assign process. --
    ap_sig_bdd_727_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_727 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    -- ap_sig_bdd_856 assign process. --
    ap_sig_bdd_856_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_856 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_859 assign process. --
    ap_sig_bdd_859_assign_proc : process(init, m_axi_bgmodel_BVALID)
    begin
                ap_sig_bdd_859 <= (not((ap_const_lv1_0 = init)) and (m_axi_bgmodel_BVALID = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_87 assign process. --
    ap_sig_bdd_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_87 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_872 assign process. --
    ap_sig_bdd_872_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_872 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    -- ap_sig_bdd_901 assign process. --
    ap_sig_bdd_901_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_901 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_942 assign process. --
    ap_sig_bdd_942_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, init, ap_sig_bdd_326)
    begin
                ap_sig_bdd_942 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = init)) and not(ap_sig_bdd_326));
    end process;


    -- ap_sig_bdd_953 assign process. --
    ap_sig_bdd_953_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_529_p2)
    begin
                ap_sig_bdd_953 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_529_p2));
    end process;


    -- ap_sig_bdd_972 assign process. --
    ap_sig_bdd_972_assign_proc : process(ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_ap_done, grp_bgsub_process_fu_475_ap_done)
    begin
                ap_sig_bdd_972 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and not(((ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done))));
    end process;


    -- ap_sig_bdd_978 assign process. --
    ap_sig_bdd_978_assign_proc : process(ap_reg_ppstg_exitcond7_reg_1057_pp4_it1, ap_reg_ppiten_pp4_it2)
    begin
                ap_sig_bdd_978 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2));
    end process;


    -- ap_sig_bdd_987 assign process. --
    ap_sig_bdd_987_assign_proc : process(m_axi_frame_out_BVALID, ap_sig_cseq_ST_st68_fsm_55)
    begin
                ap_sig_bdd_987 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not((m_axi_frame_out_BVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_994 assign process. --
    ap_sig_bdd_994_assign_proc : process(ap_reg_ppstg_exitcond9_reg_1100_pp6_it1, ap_reg_ppiten_pp6_it2)
    begin
                ap_sig_bdd_994 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_14 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_14_assign_proc : process(ap_sig_bdd_208)
    begin
        if (ap_sig_bdd_208) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_23 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_23_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_32 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_32_assign_proc : process(ap_sig_bdd_257)
    begin
        if (ap_sig_bdd_257) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_41 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_41_assign_proc : process(ap_sig_bdd_280)
    begin
        if (ap_sig_bdd_280) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp4_stg0_fsm_44 assign process. --
    ap_sig_cseq_ST_pp4_stg0_fsm_44_assign_proc : process(ap_sig_bdd_464)
    begin
        if (ap_sig_bdd_464) then 
            ap_sig_cseq_ST_pp4_stg0_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp4_stg0_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp5_stg0_fsm_50 assign process. --
    ap_sig_cseq_ST_pp5_stg0_fsm_50_assign_proc : process(ap_sig_bdd_509)
    begin
        if (ap_sig_bdd_509) then 
            ap_sig_cseq_ST_pp5_stg0_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp5_stg0_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp6_stg0_fsm_56 assign process. --
    ap_sig_cseq_ST_pp6_stg0_fsm_56_assign_proc : process(ap_sig_bdd_545)
    begin
        if (ap_sig_bdd_545) then 
            ap_sig_cseq_ST_pp6_stg0_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp6_stg0_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp7_stg0_fsm_62 assign process. --
    ap_sig_cseq_ST_pp7_stg0_fsm_62_assign_proc : process(ap_sig_bdd_590)
    begin
        if (ap_sig_bdd_590) then 
            ap_sig_cseq_ST_pp7_stg0_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp7_stg0_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_631)
    begin
        if (ap_sig_bdd_631) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_15 assign process. --
    ap_sig_cseq_ST_st18_fsm_15_assign_proc : process(ap_sig_bdd_389)
    begin
        if (ap_sig_bdd_389) then 
            ap_sig_cseq_ST_st18_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_16 assign process. --
    ap_sig_cseq_ST_st19_fsm_16_assign_proc : process(ap_sig_bdd_398)
    begin
        if (ap_sig_bdd_398) then 
            ap_sig_cseq_ST_st19_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_87)
    begin
        if (ap_sig_bdd_87) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_22 assign process. --
    ap_sig_cseq_ST_st25_fsm_22_assign_proc : process(ap_sig_bdd_643)
    begin
        if (ap_sig_bdd_643) then 
            ap_sig_cseq_ST_st25_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_24 assign process. --
    ap_sig_cseq_ST_st29_fsm_24_assign_proc : process(ap_sig_bdd_418)
    begin
        if (ap_sig_bdd_418) then 
            ap_sig_cseq_ST_st29_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_351)
    begin
        if (ap_sig_bdd_351) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_25 assign process. --
    ap_sig_cseq_ST_st30_fsm_25_assign_proc : process(ap_sig_bdd_1025)
    begin
        if (ap_sig_bdd_1025) then 
            ap_sig_cseq_ST_st30_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_31 assign process. --
    ap_sig_cseq_ST_st36_fsm_31_assign_proc : process(ap_sig_bdd_655)
    begin
        if (ap_sig_bdd_655) then 
            ap_sig_cseq_ST_st36_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_33 assign process. --
    ap_sig_cseq_ST_st40_fsm_33_assign_proc : process(ap_sig_bdd_438)
    begin
        if (ap_sig_bdd_438) then 
            ap_sig_cseq_ST_st40_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_34 assign process. --
    ap_sig_cseq_ST_st41_fsm_34_assign_proc : process(ap_sig_bdd_447)
    begin
        if (ap_sig_bdd_447) then 
            ap_sig_cseq_ST_st41_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_40 assign process. --
    ap_sig_cseq_ST_st47_fsm_40_assign_proc : process(ap_sig_bdd_667)
    begin
        if (ap_sig_bdd_667) then 
            ap_sig_cseq_ST_st47_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_42 assign process. --
    ap_sig_cseq_ST_st51_fsm_42_assign_proc : process(ap_sig_bdd_901)
    begin
        if (ap_sig_bdd_901) then 
            ap_sig_cseq_ST_st51_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_43 assign process. --
    ap_sig_cseq_ST_st52_fsm_43_assign_proc : process(ap_sig_bdd_679)
    begin
        if (ap_sig_bdd_679) then 
            ap_sig_cseq_ST_st52_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st56_fsm_45 assign process. --
    ap_sig_cseq_ST_st56_fsm_45_assign_proc : process(ap_sig_bdd_500)
    begin
        if (ap_sig_bdd_500) then 
            ap_sig_cseq_ST_st56_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st60_fsm_49 assign process. --
    ap_sig_cseq_ST_st60_fsm_49_assign_proc : process(ap_sig_bdd_697)
    begin
        if (ap_sig_bdd_697) then 
            ap_sig_cseq_ST_st60_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st60_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st68_fsm_55 assign process. --
    ap_sig_cseq_ST_st68_fsm_55_assign_proc : process(ap_sig_bdd_713)
    begin
        if (ap_sig_bdd_713) then 
            ap_sig_cseq_ST_st68_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_856)
    begin
        if (ap_sig_bdd_856) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st72_fsm_57 assign process. --
    ap_sig_cseq_ST_st72_fsm_57_assign_proc : process(ap_sig_bdd_581)
    begin
        if (ap_sig_bdd_581) then 
            ap_sig_cseq_ST_st72_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st76_fsm_61 assign process. --
    ap_sig_cseq_ST_st76_fsm_61_assign_proc : process(ap_sig_bdd_727)
    begin
        if (ap_sig_bdd_727) then 
            ap_sig_cseq_ST_st76_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st76_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_367)
    begin
        if (ap_sig_bdd_367) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st80_fsm_63 assign process. --
    ap_sig_cseq_ST_st80_fsm_63_assign_proc : process(ap_sig_bdd_624)
    begin
        if (ap_sig_bdd_624) then 
            ap_sig_cseq_ST_st80_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st80_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st84_fsm_67 assign process. --
    ap_sig_cseq_ST_st84_fsm_67_assign_proc : process(ap_sig_bdd_872)
    begin
        if (ap_sig_bdd_872) then 
            ap_sig_cseq_ST_st84_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st84_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_1010)
    begin
        if (ap_sig_bdd_1010) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_bgmodel_ARREADY assign process. --
    ap_sig_ioackin_m_axi_bgmodel_ARREADY_assign_proc : process(m_axi_bgmodel_ARREADY, ap_reg_ioackin_m_axi_bgmodel_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_ARREADY)) then 
            ap_sig_ioackin_m_axi_bgmodel_ARREADY <= m_axi_bgmodel_ARREADY;
        else 
            ap_sig_ioackin_m_axi_bgmodel_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_bgmodel_AWREADY assign process. --
    ap_sig_ioackin_m_axi_bgmodel_AWREADY_assign_proc : process(m_axi_bgmodel_AWREADY, ap_reg_ioackin_m_axi_bgmodel_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_AWREADY)) then 
            ap_sig_ioackin_m_axi_bgmodel_AWREADY <= m_axi_bgmodel_AWREADY;
        else 
            ap_sig_ioackin_m_axi_bgmodel_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_bgmodel_WREADY assign process. --
    ap_sig_ioackin_m_axi_bgmodel_WREADY_assign_proc : process(m_axi_bgmodel_WREADY, ap_reg_ioackin_m_axi_bgmodel_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_WREADY)) then 
            ap_sig_ioackin_m_axi_bgmodel_WREADY <= m_axi_bgmodel_WREADY;
        else 
            ap_sig_ioackin_m_axi_bgmodel_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_frame_out_ARREADY assign process. --
    ap_sig_ioackin_m_axi_frame_out_ARREADY_assign_proc : process(m_axi_frame_out_ARREADY, ap_reg_ioackin_m_axi_frame_out_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_ARREADY)) then 
            ap_sig_ioackin_m_axi_frame_out_ARREADY <= m_axi_frame_out_ARREADY;
        else 
            ap_sig_ioackin_m_axi_frame_out_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_frame_out_AWREADY assign process. --
    ap_sig_ioackin_m_axi_frame_out_AWREADY_assign_proc : process(m_axi_frame_out_AWREADY, ap_reg_ioackin_m_axi_frame_out_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_AWREADY)) then 
            ap_sig_ioackin_m_axi_frame_out_AWREADY <= m_axi_frame_out_AWREADY;
        else 
            ap_sig_ioackin_m_axi_frame_out_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_frame_out_WREADY assign process. --
    ap_sig_ioackin_m_axi_frame_out_WREADY_assign_proc : process(m_axi_frame_out_WREADY, ap_reg_ioackin_m_axi_frame_out_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_WREADY)) then 
            ap_sig_ioackin_m_axi_frame_out_WREADY <= m_axi_frame_out_WREADY;
        else 
            ap_sig_ioackin_m_axi_frame_out_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_596_p2 <= "1" when (indvar_phi_fu_378_p4 = ap_const_lv9_140) else "0";
    exitcond2_fu_902_p2 <= "1" when (indvar6_reg_455 = ap_const_lv9_140) else "0";
    exitcond4_fu_662_p2 <= "1" when (indvar9_phi_fu_390_p4 = ap_const_lv12_A00) else "0";
    exitcond5_fu_734_p2 <= "1" when (indvar1_phi_fu_402_p4 = ap_const_lv9_140) else "0";
    exitcond6_fu_798_p2 <= "1" when (indvar2_phi_fu_414_p4 = ap_const_lv12_A00) else "0";
    exitcond7_fu_815_p2 <= "1" when (indvar3_reg_422 = ap_const_lv12_A00) else "0";
    exitcond8_fu_846_p2 <= "1" when (indvar4_reg_433 = ap_const_lv9_140) else "0";
    exitcond9_fu_871_p2 <= "1" when (indvar5_reg_444 = ap_const_lv12_A00) else "0";
    exitcond_fu_529_p2 <= "1" when (p_reg_338 = ap_const_lv19_4B000) else "0";
    extLd1_fu_919_p3 <= 
        ap_const_lv8_FF when (part2_frame_out_q0(0) = '1') else 
        ap_const_lv8_0;
    extLd_fu_863_p3 <= 
        ap_const_lv8_FF when (part_frame_out_q0(0) = '1') else 
        ap_const_lv8_0;
    grp_bgsub_process_fu_466_ap_start <= grp_bgsub_process_fu_466_ap_start_ap_start_reg;
    grp_bgsub_process_fu_466_bgmodel_q0 <= part_bgmodel_q0;
    grp_bgsub_process_fu_466_bgmodel_q1 <= part_bgmodel_q1;
    grp_bgsub_process_fu_466_frame_in_q0 <= part_frame_in_q0;
    grp_bgsub_process_fu_466_learningRate <= learningRate_reg_349;
    grp_bgsub_process_fu_475_ap_start <= grp_bgsub_process_fu_475_ap_start_ap_start_reg;
    grp_bgsub_process_fu_475_bgmodel_q0 <= part2_bgmodel_q0;
    grp_bgsub_process_fu_475_bgmodel_q1 <= part2_bgmodel_q1;
    grp_bgsub_process_fu_475_frame_in_q0 <= part2_frame_in_q0;
    grp_bgsub_process_fu_475_learningRate <= learningRate_reg_349;

    -- indvar1_phi_fu_402_p4 assign process. --
    indvar1_phi_fu_402_p4_assign_proc : process(indvar1_reg_398, ap_sig_cseq_ST_pp2_stg0_fsm_32, exitcond5_reg_1028, ap_reg_ppiten_pp2_it1, indvar_next2_reg_1032)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and (ap_const_lv1_0 = exitcond5_reg_1028) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) then 
            indvar1_phi_fu_402_p4 <= indvar_next2_reg_1032;
        else 
            indvar1_phi_fu_402_p4 <= indvar1_reg_398;
        end if; 
    end process;


    -- indvar2_phi_fu_414_p4 assign process. --
    indvar2_phi_fu_414_p4_assign_proc : process(indvar2_reg_410, ap_sig_cseq_ST_pp3_stg0_fsm_41, exitcond6_reg_1048, ap_reg_ppiten_pp3_it1, indvar_next3_reg_1052)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and (ap_const_lv1_0 = exitcond6_reg_1048) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) then 
            indvar2_phi_fu_414_p4 <= indvar_next3_reg_1052;
        else 
            indvar2_phi_fu_414_p4 <= indvar2_reg_410;
        end if; 
    end process;


    -- indvar9_phi_fu_390_p4 assign process. --
    indvar9_phi_fu_390_p4_assign_proc : process(indvar9_reg_386, ap_sig_cseq_ST_pp1_stg0_fsm_23, exitcond4_reg_1002, ap_reg_ppiten_pp1_it1, indvar_next1_reg_1006)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and (ap_const_lv1_0 = exitcond4_reg_1002) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            indvar9_phi_fu_390_p4 <= indvar_next1_reg_1006;
        else 
            indvar9_phi_fu_390_p4 <= indvar9_reg_386;
        end if; 
    end process;

    indvar_next1_fu_668_p2 <= std_logic_vector(unsigned(indvar9_phi_fu_390_p4) + unsigned(ap_const_lv12_1));
    indvar_next2_fu_740_p2 <= std_logic_vector(unsigned(indvar1_phi_fu_402_p4) + unsigned(ap_const_lv9_1));
    indvar_next3_fu_804_p2 <= std_logic_vector(unsigned(indvar2_phi_fu_414_p4) + unsigned(ap_const_lv12_1));
    indvar_next4_fu_821_p2 <= std_logic_vector(unsigned(indvar3_reg_422) + unsigned(ap_const_lv12_1));
    indvar_next5_fu_852_p2 <= std_logic_vector(unsigned(indvar4_reg_433) + unsigned(ap_const_lv9_1));
    indvar_next6_fu_877_p2 <= std_logic_vector(unsigned(indvar5_reg_444) + unsigned(ap_const_lv12_1));
    indvar_next7_fu_908_p2 <= std_logic_vector(unsigned(indvar6_reg_455) + unsigned(ap_const_lv9_1));
    indvar_next_fu_602_p2 <= std_logic_vector(unsigned(indvar_phi_fu_378_p4) + unsigned(ap_const_lv9_1));

    -- indvar_phi_fu_378_p4 assign process. --
    indvar_phi_fu_378_p4_assign_proc : process(indvar_reg_374, ap_sig_cseq_ST_pp0_stg0_fsm_14, exitcond1_reg_982, ap_reg_ppiten_pp0_it1, indvar_next_reg_986)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (exitcond1_reg_982 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_378_p4 <= indvar_next_reg_986;
        else 
            indvar_phi_fu_378_p4 <= indvar_reg_374;
        end if; 
    end process;


    -- m_axi_bgmodel_ARADDR assign process. --
    m_axi_bgmodel_ARADDR_assign_proc : process(ap_sig_cseq_ST_st19_fsm_16, ap_sig_cseq_ST_st41_fsm_34, tmp_118_fu_652_p1, tmp_124_fu_788_p1, ap_reg_ioackin_m_axi_bgmodel_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34)) then 
                m_axi_bgmodel_ARADDR <= tmp_124_fu_788_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_16)) then 
                m_axi_bgmodel_ARADDR <= tmp_118_fu_652_p1(32 - 1 downto 0);
            else 
                m_axi_bgmodel_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_bgmodel_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_bgmodel_ARBURST <= ap_const_lv2_0;
    m_axi_bgmodel_ARCACHE <= ap_const_lv4_0;
    m_axi_bgmodel_ARID <= ap_const_lv1_0;
    m_axi_bgmodel_ARLEN <= ap_const_lv32_A00;
    m_axi_bgmodel_ARLOCK <= ap_const_lv2_0;
    m_axi_bgmodel_ARPROT <= ap_const_lv3_0;
    m_axi_bgmodel_ARQOS <= ap_const_lv4_0;
    m_axi_bgmodel_ARREGION <= ap_const_lv4_0;
    m_axi_bgmodel_ARSIZE <= ap_const_lv3_0;
    m_axi_bgmodel_ARUSER <= ap_const_lv1_0;

    -- m_axi_bgmodel_ARVALID assign process. --
    m_axi_bgmodel_ARVALID_assign_proc : process(ap_sig_cseq_ST_st19_fsm_16, ap_sig_cseq_ST_st41_fsm_34, ap_reg_ioackin_m_axi_bgmodel_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_16) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_ARREADY)))) then 
            m_axi_bgmodel_ARVALID <= ap_const_logic_1;
        else 
            m_axi_bgmodel_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_bgmodel_AWADDR assign process. --
    m_axi_bgmodel_AWADDR_assign_proc : process(bgmodel_addr_17_reg_996, bgmodel_addr_18_reg_1042, tmp_112_fu_518_p1, ap_reg_ioackin_m_axi_bgmodel_AWREADY, ap_sig_bdd_942, ap_sig_bdd_972, ap_sig_bdd_987)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_AWREADY)) then
            if (ap_sig_bdd_987) then 
                m_axi_bgmodel_AWADDR <= bgmodel_addr_18_reg_1042;
            elsif (ap_sig_bdd_972) then 
                m_axi_bgmodel_AWADDR <= bgmodel_addr_17_reg_996;
            elsif (ap_sig_bdd_942) then 
                m_axi_bgmodel_AWADDR <= tmp_112_fu_518_p1(32 - 1 downto 0);
            else 
                m_axi_bgmodel_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_bgmodel_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_bgmodel_AWBURST <= ap_const_lv2_0;
    m_axi_bgmodel_AWCACHE <= ap_const_lv4_0;
    m_axi_bgmodel_AWID <= ap_const_lv1_0;

    -- m_axi_bgmodel_AWLEN assign process. --
    m_axi_bgmodel_AWLEN_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, init, m_axi_frame_out_BVALID, ap_sig_bdd_326, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_ap_done, grp_bgsub_process_fu_475_ap_done, ap_sig_cseq_ST_st68_fsm_55, ap_reg_ioackin_m_axi_bgmodel_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_AWREADY) and not(((ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not((m_axi_frame_out_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_AWREADY)))) then 
            m_axi_bgmodel_AWLEN <= ap_const_lv32_A00;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = init)) and not(ap_sig_bdd_326) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_AWREADY))) then 
            m_axi_bgmodel_AWLEN <= ap_const_lv32_4B000;
        else 
            m_axi_bgmodel_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_bgmodel_AWLOCK <= ap_const_lv2_0;
    m_axi_bgmodel_AWPROT <= ap_const_lv3_0;
    m_axi_bgmodel_AWQOS <= ap_const_lv4_0;
    m_axi_bgmodel_AWREGION <= ap_const_lv4_0;
    m_axi_bgmodel_AWSIZE <= ap_const_lv3_0;
    m_axi_bgmodel_AWUSER <= ap_const_lv1_0;

    -- m_axi_bgmodel_AWVALID assign process. --
    m_axi_bgmodel_AWVALID_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, init, m_axi_frame_out_BVALID, ap_sig_bdd_326, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_ap_done, grp_bgsub_process_fu_475_ap_done, ap_sig_cseq_ST_st68_fsm_55, ap_reg_ioackin_m_axi_bgmodel_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = init)) and not(ap_sig_bdd_326) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_AWREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_AWREADY) and not(((ap_const_logic_0 = grp_bgsub_process_fu_466_ap_done) or (ap_const_logic_0 = grp_bgsub_process_fu_475_ap_done)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not((m_axi_frame_out_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_AWREADY)))) then 
            m_axi_bgmodel_AWVALID <= ap_const_logic_1;
        else 
            m_axi_bgmodel_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_bgmodel_BREADY assign process. --
    m_axi_bgmodel_BREADY_assign_proc : process(init, m_axi_bgmodel_BVALID, ap_sig_cseq_ST_st60_fsm_49, ap_sig_ioackin_m_axi_frame_out_AWREADY, ap_sig_cseq_ST_st76_fsm_61, ap_sig_cseq_ST_st6_fsm_5, ap_sig_bdd_859)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49) and not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY)))) or (not(((m_axi_bgmodel_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_AWREADY))) and (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61)) or (not((ap_const_lv1_0 = init)) and (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_bdd_859)))) then 
            m_axi_bgmodel_BREADY <= ap_const_logic_1;
        else 
            m_axi_bgmodel_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_bgmodel_RREADY assign process. --
    m_axi_bgmodel_RREADY_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_23, exitcond4_reg_1002, ap_sig_bdd_241, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp3_stg0_fsm_41, exitcond6_reg_1048, ap_sig_bdd_287, ap_reg_ppiten_pp3_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_23) and (ap_const_lv1_0 = exitcond4_reg_1002) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_41) and (ap_const_lv1_0 = exitcond6_reg_1048) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then 
            m_axi_bgmodel_RREADY <= ap_const_logic_1;
        else 
            m_axi_bgmodel_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_bgmodel_WDATA assign process. --
    m_axi_bgmodel_WDATA_assign_proc : process(part_bgmodel_load_reg_1071, part2_bgmodel_load_reg_1114, ap_reg_ioackin_m_axi_bgmodel_WREADY, ap_sig_bdd_953, ap_sig_bdd_978, ap_sig_bdd_994)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_WREADY)) then
            if (ap_sig_bdd_994) then 
                m_axi_bgmodel_WDATA <= part2_bgmodel_load_reg_1114;
            elsif (ap_sig_bdd_978) then 
                m_axi_bgmodel_WDATA <= part_bgmodel_load_reg_1071;
            elsif (ap_sig_bdd_953) then 
                m_axi_bgmodel_WDATA <= ap_const_lv32_0;
            else 
                m_axi_bgmodel_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_bgmodel_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_bgmodel_WID <= ap_const_lv1_0;
    m_axi_bgmodel_WLAST <= ap_const_logic_0;
    m_axi_bgmodel_WSTRB <= ap_const_lv4_F;
    m_axi_bgmodel_WUSER <= ap_const_lv1_0;

    -- m_axi_bgmodel_WVALID assign process. --
    m_axi_bgmodel_WVALID_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_529_p2, ap_reg_ppstg_exitcond7_reg_1057_pp4_it1, ap_reg_ppiten_pp4_it2, ap_reg_ppstg_exitcond9_reg_1100_pp6_it1, ap_reg_ppiten_pp6_it2, ap_reg_ioackin_m_axi_bgmodel_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_529_p2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_WREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_WREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_bgmodel_WREADY)))) then 
            m_axi_bgmodel_WVALID <= ap_const_logic_1;
        else 
            m_axi_bgmodel_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_frame_out_ARADDR assign process. --
    m_axi_frame_out_ARADDR_assign_proc : process(frame_out_addr_reg_976, frame_out_addr_2_reg_1022, ap_reg_ioackin_m_axi_frame_out_ARREADY, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st30_fsm_25)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25)) then 
                m_axi_frame_out_ARADDR <= frame_out_addr_2_reg_1022;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                m_axi_frame_out_ARADDR <= frame_out_addr_reg_976;
            else 
                m_axi_frame_out_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_frame_out_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_frame_out_ARBURST <= ap_const_lv2_0;
    m_axi_frame_out_ARCACHE <= ap_const_lv4_0;
    m_axi_frame_out_ARID <= ap_const_lv1_0;
    m_axi_frame_out_ARLEN <= ap_const_lv32_140;
    m_axi_frame_out_ARLOCK <= ap_const_lv2_0;
    m_axi_frame_out_ARPROT <= ap_const_lv3_0;
    m_axi_frame_out_ARQOS <= ap_const_lv4_0;
    m_axi_frame_out_ARREGION <= ap_const_lv4_0;
    m_axi_frame_out_ARSIZE <= ap_const_lv3_0;
    m_axi_frame_out_ARUSER <= ap_const_lv1_0;

    -- m_axi_frame_out_ARVALID assign process. --
    m_axi_frame_out_ARVALID_assign_proc : process(ap_reg_ioackin_m_axi_frame_out_ARREADY, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st30_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_ARREADY) and (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25)))) then 
            m_axi_frame_out_ARVALID <= ap_const_logic_1;
        else 
            m_axi_frame_out_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_frame_out_AWADDR assign process. --
    m_axi_frame_out_AWADDR_assign_proc : process(frame_out_addr_3_reg_1076, frame_out_addr_4_reg_1119, ap_sig_cseq_ST_st60_fsm_49, ap_sig_cseq_ST_st76_fsm_61, ap_sig_bdd_1564)
    begin
        if (ap_sig_bdd_1564) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61)) then 
                m_axi_frame_out_AWADDR <= frame_out_addr_4_reg_1119;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49)) then 
                m_axi_frame_out_AWADDR <= frame_out_addr_3_reg_1076;
            else 
                m_axi_frame_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_frame_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_frame_out_AWBURST <= ap_const_lv2_0;
    m_axi_frame_out_AWCACHE <= ap_const_lv4_0;
    m_axi_frame_out_AWID <= ap_const_lv1_0;
    m_axi_frame_out_AWLEN <= ap_const_lv32_140;
    m_axi_frame_out_AWLOCK <= ap_const_lv2_0;
    m_axi_frame_out_AWPROT <= ap_const_lv3_0;
    m_axi_frame_out_AWQOS <= ap_const_lv4_0;
    m_axi_frame_out_AWREGION <= ap_const_lv4_0;
    m_axi_frame_out_AWSIZE <= ap_const_lv3_0;
    m_axi_frame_out_AWUSER <= ap_const_lv1_0;

    -- m_axi_frame_out_AWVALID assign process. --
    m_axi_frame_out_AWVALID_assign_proc : process(m_axi_bgmodel_BVALID, ap_sig_cseq_ST_st60_fsm_49, ap_sig_cseq_ST_st76_fsm_61, ap_reg_ioackin_m_axi_frame_out_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_49) and not((m_axi_bgmodel_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_AWREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_61) and not((m_axi_bgmodel_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_AWREADY)))) then 
            m_axi_frame_out_AWVALID <= ap_const_logic_1;
        else 
            m_axi_frame_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_frame_out_BREADY assign process. --
    m_axi_frame_out_BREADY_assign_proc : process(m_axi_frame_out_BVALID, ap_sig_ioackin_m_axi_bgmodel_AWREADY, ap_sig_cseq_ST_st68_fsm_55, ap_sig_cseq_ST_st84_fsm_67)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_55) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_AWREADY) or (m_axi_frame_out_BVALID = ap_const_logic_0)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st84_fsm_67) and not((m_axi_frame_out_BVALID = ap_const_logic_0))))) then 
            m_axi_frame_out_BREADY <= ap_const_logic_1;
        else 
            m_axi_frame_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_frame_out_RREADY assign process. --
    m_axi_frame_out_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_14, exitcond1_reg_982, ap_sig_bdd_217, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp2_stg0_fsm_32, exitcond5_reg_1028, ap_sig_bdd_264, ap_reg_ppiten_pp2_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_14) and (exitcond1_reg_982 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_32) and (ap_const_lv1_0 = exitcond5_reg_1028) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then 
            m_axi_frame_out_RREADY <= ap_const_logic_1;
        else 
            m_axi_frame_out_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_frame_out_WDATA assign process. --
    m_axi_frame_out_WDATA_assign_proc : process(extLd_reg_1095, extLd1_reg_1138, ap_reg_ioackin_m_axi_frame_out_WREADY, ap_sig_bdd_1044, ap_sig_bdd_1057)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_WREADY)) then
            if (ap_sig_bdd_1057) then 
                m_axi_frame_out_WDATA <= extLd1_reg_1138;
            elsif (ap_sig_bdd_1044) then 
                m_axi_frame_out_WDATA <= extLd_reg_1095;
            else 
                m_axi_frame_out_WDATA <= "XXXXXXXX";
            end if;
        else 
            m_axi_frame_out_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_frame_out_WID <= ap_const_lv1_0;
    m_axi_frame_out_WLAST <= ap_const_logic_0;
    m_axi_frame_out_WSTRB <= ap_const_lv1_1;
    m_axi_frame_out_WUSER <= ap_const_lv1_0;

    -- m_axi_frame_out_WVALID assign process. --
    m_axi_frame_out_WVALID_assign_proc : process(ap_reg_ppstg_exitcond8_reg_1081_pp5_it1, ap_reg_ppiten_pp5_it2, ap_reg_ppstg_exitcond2_reg_1124_pp7_it1, ap_reg_ppiten_pp7_it2, ap_reg_ioackin_m_axi_frame_out_WREADY)
    begin
        if ((((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_WREADY)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frame_out_WREADY)))) then 
            m_axi_frame_out_WVALID <= ap_const_logic_1;
        else 
            m_axi_frame_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_1_fu_535_p2 <= std_logic_vector(unsigned(p_reg_338) + unsigned(ap_const_lv19_1));
    p_shl2_cast_fu_567_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_559_p3),16));
    p_shl2_fu_559_p3 <= (part_reg_362 & ap_const_lv6_0);
    p_shl3_cast_fu_621_p1 <= std_logic_vector(resize(unsigned(p_shl3_fu_613_p3),19));
    p_shl3_fu_613_p3 <= (part_reg_362 & ap_const_lv11_0);
    p_shl4_cast_fu_633_p1 <= std_logic_vector(resize(unsigned(p_shl4_fu_625_p3),19));
    p_shl4_fu_625_p3 <= (part_reg_362 & ap_const_lv9_0);
    p_shl5_cast_fu_693_p1 <= std_logic_vector(resize(unsigned(p_shl5_fu_685_p3),16));
    p_shl5_fu_685_p3 <= (tmp_58_fu_679_p2 & ap_const_lv8_0);
    p_shl6_cast_fu_705_p1 <= std_logic_vector(resize(unsigned(p_shl6_fu_697_p3),16));
    p_shl6_fu_697_p3 <= (tmp_58_fu_679_p2 & ap_const_lv6_0);
    p_shl7_cast_fu_758_p1 <= std_logic_vector(resize(unsigned(p_shl7_fu_751_p3),19));
    p_shl7_fu_751_p3 <= (tmp_58_reg_1011 & ap_const_lv11_0);
    p_shl8_cast_fu_769_p1 <= std_logic_vector(resize(unsigned(p_shl8_fu_762_p3),19));
    p_shl8_fu_762_p3 <= (tmp_58_reg_1011 & ap_const_lv9_0);
    p_shl_cast_fu_555_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_547_p3),16));
    p_shl_fu_547_p3 <= (part_reg_362 & ap_const_lv8_0);

    -- part2_bgmodel_address0 assign process. --
    part2_bgmodel_address0_assign_proc : process(ap_reg_ppiten_pp3_it2, ap_sig_cseq_ST_pp6_stg0_fsm_56, ap_reg_ppiten_pp6_it0, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_bgmodel_address0, tmp_67_fu_810_p1, tmp_72_fu_883_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp3_it2)) then 
            part2_bgmodel_address0 <= tmp_67_fu_810_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp6_stg0_fsm_56) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it0))) then 
            part2_bgmodel_address0 <= tmp_72_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_bgmodel_address0 <= grp_bgsub_process_fu_475_bgmodel_address0;
        else 
            part2_bgmodel_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    part2_bgmodel_address1 <= grp_bgsub_process_fu_475_bgmodel_address1;

    -- part2_bgmodel_ce0 assign process. --
    part2_bgmodel_ce0_assign_proc : process(ap_sig_bdd_287, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it2, ap_sig_ioackin_m_axi_bgmodel_WREADY, ap_sig_cseq_ST_pp6_stg0_fsm_56, ap_reg_ppiten_pp6_it0, ap_reg_ppstg_exitcond9_reg_1100_pp6_it1, ap_reg_ppiten_pp6_it2, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_bgmodel_ce0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp6_stg0_fsm_56) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_1100_pp6_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp6_it2)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then 
            part2_bgmodel_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_bgmodel_ce0 <= grp_bgsub_process_fu_475_bgmodel_ce0;
        else 
            part2_bgmodel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- part2_bgmodel_ce1 assign process. --
    part2_bgmodel_ce1_assign_proc : process(ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_bgmodel_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_bgmodel_ce1 <= grp_bgsub_process_fu_475_bgmodel_ce1;
        else 
            part2_bgmodel_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- part2_bgmodel_d0 assign process. --
    part2_bgmodel_d0_assign_proc : process(ap_reg_ppiten_pp3_it2, reg_490, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_bgmodel_d0)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp3_it2)) then 
            part2_bgmodel_d0 <= reg_490;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_bgmodel_d0 <= grp_bgsub_process_fu_475_bgmodel_d0;
        else 
            part2_bgmodel_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    part2_bgmodel_d1 <= grp_bgsub_process_fu_475_bgmodel_d1;

    -- part2_bgmodel_we0 assign process. --
    part2_bgmodel_we0_assign_proc : process(ap_sig_bdd_287, ap_reg_ppiten_pp3_it1, ap_reg_ppiten_pp3_it2, ap_reg_ppstg_exitcond6_reg_1048_pp3_it1, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_bgmodel_we0)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not((ap_sig_bdd_287 and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond6_reg_1048_pp3_it1)))) then 
            part2_bgmodel_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_bgmodel_we0 <= grp_bgsub_process_fu_475_bgmodel_we0;
        else 
            part2_bgmodel_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- part2_bgmodel_we1 assign process. --
    part2_bgmodel_we1_assign_proc : process(ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_bgmodel_we1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_bgmodel_we1 <= grp_bgsub_process_fu_475_bgmodel_we1;
        else 
            part2_bgmodel_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- part2_frame_in_address0 assign process. --
    part2_frame_in_address0_assign_proc : process(ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_frame_in_address0, tmp_64_fu_746_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp2_it2)) then 
            part2_frame_in_address0 <= tmp_64_fu_746_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_frame_in_address0 <= grp_bgsub_process_fu_475_frame_in_address0;
        else 
            part2_frame_in_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- part2_frame_in_ce0 assign process. --
    part2_frame_in_ce0_assign_proc : process(ap_sig_bdd_264, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_frame_in_ce0)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then 
            part2_frame_in_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_frame_in_ce0 <= grp_bgsub_process_fu_475_frame_in_ce0;
        else 
            part2_frame_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    part2_frame_in_d0 <= reg_484;

    -- part2_frame_in_we0 assign process. --
    part2_frame_in_we0_assign_proc : process(ap_sig_bdd_264, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it2, ap_reg_ppstg_exitcond5_reg_1028_pp2_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not((ap_sig_bdd_264 and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1028_pp2_it1)))) then 
            part2_frame_in_we0 <= ap_const_logic_1;
        else 
            part2_frame_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- part2_frame_out_address0 assign process. --
    part2_frame_out_address0_assign_proc : process(ap_sig_cseq_ST_pp7_stg0_fsm_62, ap_reg_ppiten_pp7_it0, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_frame_out_address0, tmp_74_fu_914_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp7_stg0_fsm_62) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it0))) then 
            part2_frame_out_address0 <= tmp_74_fu_914_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_frame_out_address0 <= grp_bgsub_process_fu_475_frame_out_address0;
        else 
            part2_frame_out_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- part2_frame_out_ce0 assign process. --
    part2_frame_out_ce0_assign_proc : process(ap_sig_ioackin_m_axi_frame_out_WREADY, ap_sig_cseq_ST_pp7_stg0_fsm_62, ap_reg_ppiten_pp7_it0, ap_reg_ppstg_exitcond2_reg_1124_pp7_it1, ap_reg_ppiten_pp7_it2, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_frame_out_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp7_stg0_fsm_62) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1124_pp7_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp7_it2))))) then 
            part2_frame_out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_frame_out_ce0 <= grp_bgsub_process_fu_475_frame_out_ce0;
        else 
            part2_frame_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    part2_frame_out_d0 <= grp_bgsub_process_fu_475_frame_out_d0;

    -- part2_frame_out_we0 assign process. --
    part2_frame_out_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_475_frame_out_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part2_frame_out_we0 <= grp_bgsub_process_fu_475_frame_out_we0;
        else 
            part2_frame_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    part_1_fu_927_p2 <= std_logic_vector(unsigned(part_reg_362) + unsigned(ap_const_lv7_2));

    -- part_bgmodel_address0 assign process. --
    part_bgmodel_address0_assign_proc : process(ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_pp4_stg0_fsm_44, ap_reg_ppiten_pp4_it0, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_bgmodel_address0, tmp_61_fu_674_p1, tmp_68_fu_827_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            part_bgmodel_address0 <= tmp_61_fu_674_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0))) then 
            part_bgmodel_address0 <= tmp_68_fu_827_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_bgmodel_address0 <= grp_bgsub_process_fu_466_bgmodel_address0;
        else 
            part_bgmodel_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    part_bgmodel_address1 <= grp_bgsub_process_fu_466_bgmodel_address1;

    -- part_bgmodel_ce0 assign process. --
    part_bgmodel_ce0_assign_proc : process(ap_sig_bdd_241, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_ioackin_m_axi_bgmodel_WREADY, ap_sig_cseq_ST_pp4_stg0_fsm_44, ap_reg_ppiten_pp4_it0, ap_reg_ppstg_exitcond7_reg_1057_pp4_it1, ap_reg_ppiten_pp4_it2, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_bgmodel_ce0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp4_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it0) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_bgmodel_WREADY) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond7_reg_1057_pp4_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp4_it2)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            part_bgmodel_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_bgmodel_ce0 <= grp_bgsub_process_fu_466_bgmodel_ce0;
        else 
            part_bgmodel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- part_bgmodel_ce1 assign process. --
    part_bgmodel_ce1_assign_proc : process(ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_bgmodel_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_bgmodel_ce1 <= grp_bgsub_process_fu_466_bgmodel_ce1;
        else 
            part_bgmodel_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- part_bgmodel_d0 assign process. --
    part_bgmodel_d0_assign_proc : process(ap_reg_ppiten_pp1_it2, reg_490, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_bgmodel_d0)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            part_bgmodel_d0 <= reg_490;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_bgmodel_d0 <= grp_bgsub_process_fu_466_bgmodel_d0;
        else 
            part_bgmodel_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    part_bgmodel_d1 <= grp_bgsub_process_fu_466_bgmodel_d1;

    -- part_bgmodel_we0 assign process. --
    part_bgmodel_we0_assign_proc : process(ap_sig_bdd_241, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond4_reg_1002_pp1_it1, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_bgmodel_we0)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_241 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1002_pp1_it1)))) then 
            part_bgmodel_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_bgmodel_we0 <= grp_bgsub_process_fu_466_bgmodel_we0;
        else 
            part_bgmodel_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- part_bgmodel_we1 assign process. --
    part_bgmodel_we1_assign_proc : process(ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_bgmodel_we1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_bgmodel_we1 <= grp_bgsub_process_fu_466_bgmodel_we1;
        else 
            part_bgmodel_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- part_frame_in_address0 assign process. --
    part_frame_in_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_frame_in_address0, tmp_57_fu_608_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            part_frame_in_address0 <= tmp_57_fu_608_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_frame_in_address0 <= grp_bgsub_process_fu_466_frame_in_address0;
        else 
            part_frame_in_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- part_frame_in_ce0 assign process. --
    part_frame_in_ce0_assign_proc : process(ap_sig_bdd_217, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_frame_in_ce0)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            part_frame_in_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_frame_in_ce0 <= grp_bgsub_process_fu_466_frame_in_ce0;
        else 
            part_frame_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    part_frame_in_d0 <= reg_484;

    -- part_frame_in_we0 assign process. --
    part_frame_in_we0_assign_proc : process(ap_sig_bdd_217, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond1_reg_982_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_217 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_982_pp0_it1)))) then 
            part_frame_in_we0 <= ap_const_logic_1;
        else 
            part_frame_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- part_frame_out_address0 assign process. --
    part_frame_out_address0_assign_proc : process(ap_sig_cseq_ST_pp5_stg0_fsm_50, ap_reg_ppiten_pp5_it0, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_frame_out_address0, tmp_70_fu_858_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_50) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0))) then 
            part_frame_out_address0 <= tmp_70_fu_858_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_frame_out_address0 <= grp_bgsub_process_fu_466_frame_out_address0;
        else 
            part_frame_out_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- part_frame_out_ce0 assign process. --
    part_frame_out_ce0_assign_proc : process(ap_sig_cseq_ST_pp5_stg0_fsm_50, ap_reg_ppiten_pp5_it0, ap_reg_ppstg_exitcond8_reg_1081_pp5_it1, ap_sig_ioackin_m_axi_frame_out_WREADY, ap_reg_ppiten_pp5_it2, ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_frame_out_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp5_stg0_fsm_50) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_reg_1081_pp5_it1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frame_out_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp5_it2))))) then 
            part_frame_out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_frame_out_ce0 <= grp_bgsub_process_fu_466_frame_out_ce0;
        else 
            part_frame_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    part_frame_out_d0 <= grp_bgsub_process_fu_466_frame_out_d0;

    -- part_frame_out_we0 assign process. --
    part_frame_out_we0_assign_proc : process(ap_sig_cseq_ST_st52_fsm_43, grp_bgsub_process_fu_466_frame_out_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_43)) then 
            part_frame_out_we0 <= grp_bgsub_process_fu_466_frame_out_we0;
        else 
            part_frame_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_111_cast_fu_496_p1 <= std_logic_vector(resize(signed(frame_in),33));

    tmp_111_fu_504_p4 <= bgmodel1(31 downto 2);
        tmp_112_cast_fu_500_p1 <= std_logic_vector(resize(signed(frame_out2),33));

    tmp_112_fu_518_p1 <= std_logic_vector(resize(unsigned(tmp_111_fu_504_p4),64));
    tmp_113_cast_fu_514_p1 <= std_logic_vector(resize(unsigned(tmp_111_fu_504_p4),31));
    tmp_113_fu_577_p1 <= std_logic_vector(resize(unsigned(tmp_54_fu_571_p2),33));
    tmp_114_fu_581_p2 <= std_logic_vector(signed(tmp_111_cast_reg_937) + signed(tmp_113_fu_577_p1));
        tmp_115_fu_586_p1 <= std_logic_vector(resize(signed(tmp_114_fu_581_p2),64));

    tmp_116_fu_643_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_637_p2),31));
    tmp_117_fu_647_p2 <= std_logic_vector(unsigned(tmp_113_cast_reg_949) + unsigned(tmp_116_fu_643_p1));
    tmp_118_fu_652_p1 <= std_logic_vector(resize(unsigned(tmp_117_reg_991),64));
    tmp_119_fu_715_p1 <= std_logic_vector(resize(unsigned(tmp_59_fu_709_p2),33));
    tmp_120_fu_719_p2 <= std_logic_vector(signed(tmp_111_cast_reg_937) + signed(tmp_119_fu_715_p1));
        tmp_121_fu_724_p1 <= std_logic_vector(resize(signed(tmp_120_fu_719_p2),64));

    tmp_122_fu_779_p1 <= std_logic_vector(resize(unsigned(tmp_62_fu_773_p2),31));
    tmp_123_fu_783_p2 <= std_logic_vector(unsigned(tmp_113_cast_reg_949) + unsigned(tmp_122_fu_779_p1));
    tmp_124_fu_788_p1 <= std_logic_vector(resize(unsigned(tmp_123_reg_1037),64));
    tmp_125_fu_832_p2 <= std_logic_vector(unsigned(tmp_113_reg_971) + unsigned(tmp_112_cast_reg_943));
        tmp_126_fu_836_p1 <= std_logic_vector(resize(signed(tmp_125_fu_832_p2),64));

    tmp_127_fu_888_p2 <= std_logic_vector(unsigned(tmp_119_reg_1017) + unsigned(tmp_112_cast_reg_943));
        tmp_128_fu_892_p1 <= std_logic_vector(resize(signed(tmp_127_fu_888_p2),64));

    tmp_53_fu_541_p2 <= "1" when (unsigned(part_reg_362) < unsigned(ap_const_lv7_78)) else "0";
    tmp_54_fu_571_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_555_p1) + unsigned(p_shl2_cast_fu_567_p1));
    tmp_55_fu_637_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_621_p1) + unsigned(p_shl4_cast_fu_633_p1));
    tmp_57_fu_608_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_374_pp0_it1),64));
    tmp_58_fu_679_p2 <= (part_reg_362 or ap_const_lv7_1);
    tmp_59_fu_709_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_693_p1) + unsigned(p_shl6_cast_fu_705_p1));
    tmp_61_fu_674_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar9_reg_386_pp1_it1),64));
    tmp_62_fu_773_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_758_p1) + unsigned(p_shl8_cast_fu_769_p1));
    tmp_64_fu_746_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar1_reg_398_pp2_it1),64));
    tmp_67_fu_810_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar2_reg_410_pp3_it1),64));
    tmp_68_fu_827_p1 <= std_logic_vector(resize(unsigned(indvar3_reg_422),64));
    tmp_70_fu_858_p1 <= std_logic_vector(resize(unsigned(indvar4_reg_433),64));
    tmp_72_fu_883_p1 <= std_logic_vector(resize(unsigned(indvar5_reg_444),64));
    tmp_74_fu_914_p1 <= std_logic_vector(resize(unsigned(indvar6_reg_455),64));
end behav;
